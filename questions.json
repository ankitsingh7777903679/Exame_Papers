{
  "iot": {
    "mcq": [
      {
        "question": "1. What does IoT stand for?",
        "options": ["a) Internet of Things", "b) Internet of Technology"],
        "correctAnswer": "a",
        "id": "iot-q1"
      }
    ],
    "onemarks": [
      {
        "question": "1. What is IoT?",
        "answer": "Internet of Things (IoT) is a network of physical objects or people called 'things' that are embedded with software, electronics, network, and sensors that allow these objects to collect and exchange data."
      }
    ],
    "long": [
      {
        "question": "1. Explain the architecture of IoT.",
        "answer": "The IoT architecture consists of several layers:\n- **Perception Layer**: Includes sensors and devices that collect data.\n- **Network Layer**: Facilitates communication between devices using protocols like Wi-Fi, Bluetooth, etc.\n- **Application Layer**: Provides user interfaces and services, such as smart home apps or healthcare monitoring systems.\nEach layer works together to enable seamless data flow and automation."
      }
    ]
  },
  "java": {
    "mcq": [
      {
        "question": "1. What does JVM stand for?",
        "options": ["a) Java Virtual Machine", "b) Java Variable Machine"],
        "correctAnswer": "a",
        "id": "java-q1"
      }
    ],
    "onemarks": [
      {
        "question": "1. What is JVM?",
        "answer": "The Java Virtual Machine (JVM) is an abstract computing machine that enables a computer to run a Java program."
      },
      {
        "question": "2. What is the unsigned right shift operator in Java?",
        "answer": "The unsigned right shift, also known as the zero-fill right shift, is a bit manipulation operation in Java. It shifts the bits of a number to the right, and instead of preserving the sign bit (like the signed right shift), it fills the leftmost bits with zeros. This is represented by the operator >>> in Java.",
        "code": "int number = -8; // Binary: 11111111111111111111111111111000\nint result = number >>> 2; // Shifts"
      },
      {
        "question": "3. Give Use of this keyword.",
        "answer": "In Java, the this keyword is a reference to the current object in a method or constructor.",
        "code": "public void setName(String name) {\n    this.name = name; // Refers to the instance variable 'name'\n}\n\npublic Person(String name) {\n    this(name, 25); // Calls the constructor with two parameters\n}\n\npublic Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n}"
      },
      {
        "question": "4. What is the difference between checked and unchecked exceptions?",
        "answer": "Checked exceptions are checked at compile time, requiring the programmer to handle them using try-catch blocks or by declaring them in the method signature using throws. Examples include IOException and SQLException.\n Unchecked exceptions occur at runtime and are not checked during compilation. They typically represent programming errors, such as NullPointerException and ArrayIndexOutOfBoundsException.",
        "code": ""
      },
      {
        "question": "5. What is garbage collection?",
        "answer": "Garbage collection in Java is the process of automatically identifying and removing objects that are no longer in use to reclaim memory and prevent memory leaks. This ensures efficient memory management without requiring explicit deallocation by the programmer.",
        "code": ""
      },
      {
        "question": "6. List methods of the Graphics class.",
        "answer": "The Graphics class in Java provides methods for drawing shapes, text, and images. Common methods include drawLine(), drawRect(), drawOval(), drawString(), setColor(), and fillRect(). These methods are used in graphical programming for creating custom drawings.",
        "code": ""
      }
    ],
    "long": [
      {
        "question": "1. What are the features of Java?",
        "answer": "Java is a powerful, versatile programming language that is widely used in software development. Its features are what make it stand out as an efficient and robust language. Here are the detailed features:\n\n1. **Platform Independence:** Java's 'Write Once, Run Anywhere' principle allows code compiled on one platform to run seamlessly on another, thanks to the Java Virtual Machine (JVM).\n\n2. **Object-Oriented:** Java adopts the object-oriented programming paradigm, encouraging modular and reusable code by organizing it into classes and objects.\n\n3. **Robust:** With features like garbage collection, exception handling, and memory allocation, Java minimizes programming errors and ensures a stable runtime environment.\n\n4. **Secure:** Java applications are run in a secure environment. The security manager defines access rules for classes, providing protection against unauthorized access.\n\n5. **Multithreaded:** Java supports multithreading, enabling the simultaneous execution of two or more threads for maximum utilization of the CPU.\n\n6. **High Performance:** Java achieves high performance through the Just-In-Time (JIT) compiler, which translates bytecode into native machine code at runtime.\n\n7. **Dynamic and Extensible:** Java supports dynamic linking of classes at runtime and allows integration with libraries, making applications adaptable and flexible.\n\n8. **Rich API:** Java provides a wide array of built-in libraries for tasks like data structures, networking, GUI development, and more.\n\nHere’s a program that demonstrates some of these features, such as platform independence, object-oriented programming, and multithreading:\n\n",
        "code": "public class JavaFeaturesDemo implements Runnable {\n    private String message;\n\n    public JavaFeaturesDemo(String message) {\n        this.message = message; // Object-Oriented: Encapsulation\n    }\n\n    @Override\n    public void run() {\n        System.out.println(message);\n    }\n\n    public static void main(String[] args) {\n        Thread thread1 = new Thread(new JavaFeaturesDemo(\"Hello from Thread 1!\"));\n        Thread thread2 = new Thread(new JavaFeaturesDemo(\"Hello from Thread 2!\"));\n\n        thread1.start(); // Multithreading: Starts Thread 1\n        thread2.start(); // Multithreading: Starts Thread 2\n\n        System.out.println(\"Java is platform-independent, robust, and dynamic!\");\n    }\n}"
      },
      {
        "question": "2. Explain Java programming structure.",
        "answer": "A Java program follows a specific structure that ensures the program is organized, readable, and executable. The structure consists of the following components:\n\n1. **Package Declaration (Optional):** If the program belongs to a specific package, it begins with a package declaration.\n   Example: `package myPackage;`\n\n2. **Import Statements (Optional):** To include libraries or classes from Java's API, the `import` keyword is used.\n   Example: `import java.util.Scanner;`\n\n3. **Class Definition:** Every Java program is written inside a class. The class name must match the filename (if it is public).\n   Example: `public class MyProgram { ... }`\n\n4. **Main Method:** The `main` method serves as the entry point for program execution. Its signature is `public static void main(String[] args) { ... }`.\n\n5. **Variables and Methods:** Inside the class, you define variables and methods to perform specific tasks.\n   Example: `int num = 10;`\n\n6. **Comments:** Comments are added for clarity and do not affect program execution. They can be single-line (`//`) or multi-line (`/* */`).\n\nHere’s an example program that demonstrates the Java programming structure:",
        "code": "package myPackage;\n\nimport java.util.Scanner;\n\npublic class MyProgram {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter your name: \");\n        String name = scanner.nextLine(); // Reads user input\n        System.out.println(\"Hello, \" + name + \"!\"); // Prints output\n        scanner.close();\n    }\n}"
      },
      {
        "question": "3. Explain the static keyword in detail with its types.",
        "answer": "In Java, the static keyword is used to create variables, methods, blocks, or nested classes that are shared across all instances of the class. Static members belong to the class rather than any specific instance, making them memory efficient and easily accessible without creating an object.\n\n### Types of Static Members:\n\n1. **Static Variables:**\n   - Also known as class variables.\n   - These are shared across all objects of the class and only a single copy of the variable is maintained.\n   - Example: `static int count;`\n\n2. **Static Methods:**\n   - These are methods that can be called without creating an object of the class.\n   - Static methods cannot access instance variables or methods directly; they can only access other static members.\n   - Example: `static void display();`\n\n3. **Static Blocks:**\n   - A static block is used for initializing static variables.\n   - It is executed only once, when the class is loaded.\n   - Example:\n     ```java\n     static {\n         System.out.println(\"Static block executed!\");\n     }\n     ```\n\n4. **Static Nested Classes:**\n   - A static nested class is a class defined inside another class with the static modifier.\n   - It can be instantiated without an object of the outer class.\n   - Example:\n     ```java\n     static class NestedClass {\n         void display() {\n             System.out.println(\"Inside static nested class\");\n         }\n     }\n     ```",
        "code": "public class StaticKeywordDemo {\n    // Static variable\n    static int count = 0;\n\n    // Static method\n    static void displayCount() {\n        System.out.println(\"Count: \" + count);\n    }\n\n    // Static block\n    static {\n        count = 10;\n        System.out.println(\"Static block executed! Count initialized to \" + count);\n    }\n\n    // Static nested class\n    static class NestedClass {\n        void showMessage() {\n            System.out.println(\"Hello from the static nested class!\");\n        }\n    }\n\n    public static void main(String[] args) {\n        // Accessing static variable and method\n        StaticKeywordDemo.displayCount(); // Outputs: Count: 10\n\n        // Instantiating the static nested class\n        StaticKeywordDemo.NestedClass nested = new StaticKeywordDemo.NestedClass();\n        nested.showMessage(); // Outputs: Hello from the static nested class!\n    }\n}"
      },
      {
        "question": "4. Explain runtime polymorphism using an interface.",
        "answer": "Runtime polymorphism in Java occurs when a call to an overridden method is resolved at runtime rather than compile time. It is achieved by method overriding, typically through inheritance or interfaces. When a class implements an interface and provides implementations for its methods, the actual method that gets executed depends on the runtime type of the object being referred to, not the type of the reference variable. This enables dynamic method dispatch.\n\nInterfaces are used to achieve runtime polymorphism by defining a common method signature that different classes can implement differently. The appropriate implementation is determined at runtime based on the actual object being used.",
        "code": "interface Animal {\n    void sound(); // Interface method\n}\n\nclass Dog implements Animal {\n    @Override\n    public void sound() {\n        System.out.println(\"Woof\");\n    }\n}\n\nclass Cat implements Animal {\n    @Override\n    public void sound() {\n        System.out.println(\"Meow\");\n    }\n}\n\npublic class RuntimePolymorphismDemo {\n    public static void main(String[] args) {\n        Animal myAnimal;\n\n        myAnimal = new Dog(); // Runtime decision\n        myAnimal.sound(); // Outputs: Woof\n\n        myAnimal = new Cat(); // Runtime decision\n        myAnimal.sound(); // Outputs: Meow\n    }\n}"
      },
      {
        "question": "5. Give the difference between String and StringBuffer, and explain any 4 methods of the String class.",
        "answer": "**Difference between String and StringBuffer:**\n\n1. **Mutability:**\n   - String: Immutable. Any modification creates a new object.\n   - StringBuffer: Mutable. Modifications occur within the same object.\n\n2. **Performance:**\n   - String: Slower for frequent modifications due to object creation.\n   - StringBuffer: Faster for frequent modifications as it doesn’t create new objects.\n\n3. **Thread-Safety:**\n   - String: Not thread-safe.\n   - StringBuffer: Thread-safe because its methods are synchronized.\n\n4. **Usage:**\n   - String: Used when data doesn’t change frequently.\n   - StringBuffer: Used when data changes frequently (e.g., in loops).\n\n**4 Methods of the String Class:**\n\n1. **length():** Returns the length of the string.\n   ```java\n   String str = \"Hello\";\n   int len = str.length(); // Output: 5\n   ```\n\n2. **charAt(int index):** Returns the character at the specified index.\n   ```java\n   String str = \"Hello\";\n   char ch = str.charAt(1); // Output: 'e'\n   ```\n\n3. **substring(int beginIndex, int endIndex):** Returns a substring from the specified range.\n   ```java\n   String str = \"Hello World\";\n   String sub = str.substring(0, 5); // Output: \"Hello\"\n   ```\n\n4. **toUpperCase():** Converts all characters of the string to uppercase.\n   ```java\n   String str = \"hello\";\n   String upper = str.toUpperCase(); // Output: \"HELLO\"\n   ```",
        "code": "public class StringBufferDemo {\n    public static void main(String[] args) {\n        // Using StringBuffer for efficient modifications\n        StringBuffer sb = new StringBuffer(\"Hello\");\n        sb.append(\" World\"); // Modifies the same object\n        System.out.println(sb); // Output: Hello World\n\n        // Demonstrating String immutability\n        String str = \"Hello\";\n        String newStr = str.concat(\" World\"); // Creates a new object\n        System.out.println(newStr); // Output: Hello World\n    }\n}"
      },
      {
        "question": "6. Explain try, catch, and finally keywords in Java.",
        "answer": "In Java, the try, catch, and finally keywords are used for exception handling, enabling developers to handle runtime errors gracefully and maintain normal program flow.\n\n1. **try block:** The try block contains the code that might throw an exception. If an exception occurs, it is passed to the corresponding catch block.\n   \n2. **catch block:** The catch block is used to handle specific exceptions. You can have multiple catch blocks to handle different types of exceptions separately.\n   \n3. **finally block:** The finally block contains code that will execute regardless of whether an exception was thrown or caught. It is typically used for cleanup activities, such as closing resources.",
        "code": "public class ExceptionHandlingDemo {\n    public static void main(String[] args) {\n        try {\n            int result = 10 / 0; // This will throw an ArithmeticException\n            System.out.println(\"Result: \" + result);\n        } catch (ArithmeticException e) {\n            System.out.println(\"Exception caught: Division by zero.\");\n        } finally {\n            System.out.println(\"Finally block executed.\"); // Cleanup code\n        }\n    }\n}"
      },
      {
        "question": "7. What is a thread? Explain thread lifecycle.",
        "answer": "A thread in Java is the smallest unit of a process that runs independently. It is a lightweight subprocess and is part of a multithreaded environment, allowing multiple tasks to run concurrently within a program. Threads enhance the efficiency of CPU utilization by enabling parallel execution.\n\n**Thread Lifecycle:**\n1. **New (Created):** A thread begins its lifecycle in the 'new' state when it is created using the `Thread` class or implementing the `Runnable` interface but hasn't started executing.\n   Example: `Thread t = new Thread();`\n\n2. **Runnable:** The thread enters the runnable state after the `start()` method is called. It is ready to run and waiting for CPU scheduling.\n\n3. **Running:** When a thread scheduler selects the thread, it moves to the running state, where the `run()` method executes.\n\n4. **Blocked/Waiting:** The thread enters this state if it is waiting for some resource or signal, such as waiting for I/O operations to complete.\n\n5. **Terminated:** The thread ends its lifecycle after completing execution or when it is explicitly stopped.",
        "code": "class MyThread extends Thread {\n        public void run() {\n        System.out.println(\"Thread is running...\");\n    }\n\n    public static void main(String[] args) {\n        MyThread thread = new MyThread();\n        thread.start(); // Moves thread to Runnable state\n    }\n}"
      },
      {
        "question": "8. What is a package? Explain package creation and import in detail with an example.",
        "answer": "In Java, a package is a way of grouping related classes and interfaces together, which helps in organizing code and avoiding name conflicts. Packages also make it easier to manage access control and reuse code.\n\n**Types of Packages:**\n1. **Built-in Packages:** Java provides several built-in packages like `java.util` (for utility classes) and `java.io` (for input/output operations).\n2. **User-defined Packages:** Developers can create their own packages to organize their classes as per their needs.\n\n**Steps to Create and Import a Package:**\n\n1. **Creating a Package:**\n   - Use the `package` keyword at the beginning of the Java file to specify the package name.\n   - Save the file in a folder that matches the package name.\n\n   Example:\n   ```java\n   package mypackage;\n\n   public class MyClass {\n       public void displayMessage() {\n           System.out.println(\"Hello from MyClass in mypackage!\");\n       }\n   }\n   ```\n\n   Save this file as `MyClass.java` inside a folder named `mypackage`.\n\n2. **Compiling the Package:**\n   - Compile the file using the command: `javac -d . MyClass.java`\n   - The `-d .` option creates the package structure in the current directory.\n\n3. **Using the Package:**\n   - Import the package in another class using the `import` keyword.\n   - Call the methods or access the classes from the package.\n\n   Example:\n   ```java\n   import mypackage.MyClass;\n\n   public class TestPackage {\n       public static void main(String[] args) {\n           MyClass obj = new MyClass();\n           obj.displayMessage();\n       }\n   }\n   ```\n\n4. **Running the Program:**\n   - Compile the `TestPackage.java` file.\n   - Run the program: `java TestPackage`\n\nThe output will be: \"Hello from MyClass in mypackage!\"\n\nPackages improve code modularity and reusability and make large-scale development more manageable.",
        "code": "package mypackage;\n\npublic class MyClass {\n    public void displayMessage() {\n        System.out.println(\"Hello from MyClass in mypackage!\");\n    }\n}\n\n// File: TestPackage.java\nimport mypackage.MyClass;\n\npublic class TestPackage {\n    public static void main(String[] args) {\n        MyClass obj = new MyClass();\n        obj.displayMessage();\n    }\n}"
      },
      {
        "question": "9. What is <applet>? How can we pass parameters to an applet?",
        "answer": "In Java, `<applet>` is an HTML tag that is used to embed a Java applet in a webpage. Applets are small Java applications that run within a web browser or an applet viewer. Although applets are now considered outdated, they were widely used for interactive web applications.\n\n**Passing Parameters to an Applet:**\n1. Parameters can be passed to an applet using the `<param>` tag inside the `<applet>` tag in an HTML file.\n2. The applet can retrieve these parameters using the `getParameter(String name)` method in the Java code.\n\nThe `<param>` tag specifies the name and value of the parameter. The applet reads these values during its execution.",
        "code": "import java.applet.Applet;\nimport java.awt.Graphics;\n\npublic class ParamApplet extends Applet {\n    String message;\n\n    @Override\n    public void init() {\n        message = getParameter(\"message\"); // Retrieves the parameter value\n        if (message == null) {\n            message = \"Default Message\"; // Fallback if no parameter is passed\n        }\n    }\n\n    @Override\n    public void paint(Graphics g) {\n        g.drawString(message, 20, 20); // Displays the message\n    }\n}\n\n// Corresponding HTML File\n// <html>\n// <body>\n// <applet code=\"ParamApplet.class\" width=\"300\" height=\"100\">\n// <param name=\"message\" value=\"Hello, Applet!\">\n// </applet>\n// </body>\n// </html>"
      },
      {
        "question": "10. What is method overloading? Differentiate between method overloading and overriding.",
        "answer": "Method overloading is a feature in Java where two or more methods in the same class share the same name but differ in their parameter lists (number, type, or order of parameters). It provides multiple ways to perform a similar task.\n\n**Difference Between Method Overloading and Method Overriding:**\n1. **Definition:**\n   - Overloading: Allows multiple methods with the same name but different parameter lists within the same class.\n   - Overriding: Redefines a method of the parent class in the child class to provide a specific implementation.\n\n2. **Parameters:**\n   - Overloading: Parameters must be different (number, type, or order).\n   - Overriding: Parameters must be the same as the parent class method.\n\n3. **Access:**\n   - Overloading: Can exist in the same or different classes (inheritance not required).\n   - Overriding: Requires inheritance, as the method is redefined in a child class.\n\n4. **Binding:**\n   - Overloading: Resolved at compile time (static binding).\n   - Overriding: Resolved at runtime (dynamic binding).",
        "code": "class OverloadingDemo {\n    // Overloaded methods\n    void display(int a) {\n        System.out.println(\"Display with an integer: \" + a);\n    }\n\n    void display(String str) {\n        System.out.println(\"Display with a string: \" + str);\n    }\n\n    public static void main(String[] args) {\n        OverloadingDemo obj = new OverloadingDemo();\n        obj.display(10);  // Calls the first method\n        obj.display(\"Hello\");  // Calls the second method\n    }\n}\n\nclass Parent {\n    void show() {\n        System.out.println(\"Parent show method\");\n    }\n}\n\nclass Child extends Parent {\n    // Override\n    void show() {\n        System.out.println(\"Child show method\");\n    }\n\n    public static void main(String[] args) {\n        Parent obj = new Child(); // Upcasting\n        obj.show(); // Calls the overridden method in Child class\n    }\n}"
      },
      {
        "question": "11. Explain bitwise operators in Java.",
        "answer": "Bitwise operators in Java perform operations on individual bits of integer types, such as int and long. They are used for low-level programming, such as working with flags or manipulating binary data. \n\n**Bitwise Operators:**\n\n1. **AND (&):** Performs a bitwise AND operation. It returns 1 if both corresponding bits are 1; otherwise, it returns 0.\n   Example: `5 & 3` (Binary: 0101 & 0011) Result: 1 (Binary: 0001).\n\n2. **OR (|):** Performs a bitwise OR operation. It returns 1 if either of the corresponding bits is 1.\n   Example: `5 | 3` (Binary: 0101 | 0011) Result: 7 (Binary: 0111).\n\n3. **XOR (^):** Performs a bitwise XOR operation. It returns 1 if the corresponding bits are different; otherwise, it returns 0.\n   Example: `5 ^ 3` (Binary: 0101 ^ 0011) Result: 6 (Binary: 0110).\n\n4. **Complement (~):** Inverts all bits of the number. Each 0 becomes 1 and each 1 becomes 0.\n   Example: `~5` (Binary: ~0101) Result: -6 (Binary for -6 in two's complement: 1010).\n\n5. **Left Shift (<<):** Shifts bits to the left and fills zeros in the vacant positions. It effectively multiplies the number by 2 for each shift.\n   Example: `5 << 1` (Binary: 0101 << 1) Result: 10 (Binary: 1010).\n\n6. **Right Shift (>>):** Shifts bits to the right and fills the leftmost positions with the sign bit (0 for positive numbers, 1 for negative numbers). It effectively divides the number by 2 for each shift.\n   Example: `5 >> 1` (Binary: 0101 >> 1) Result: 2 (Binary: 0010).\n\n7. **Unsigned Right Shift (>>>):** Shifts bits to the right and fills the leftmost positions with 0, regardless of the sign.\n   Example: `-5 >>> 1` (Binary: -5 in two's complement is 11111111 11111111 11111111 11111011; >>> 1) Result: 2147483645.",
        "code": "public class BitwiseOperatorsDemo {\n    public static void main(String[] args) {\n        int a = 5; // Binary: 0101\n        int b = 3; // Binary: 0011\n\n        // Bitwise AND\n        System.out.println(\"a & b: \" + (a & b)); // Output: 1\n\n        // Bitwise OR\n        System.out.println(\"a | b: \" + (a | b)); // Output: 7\n\n        // Bitwise XOR\n        System.out.println(\"a ^ b: \" + (a ^ b)); // Output: 6\n\n        // Bitwise Complement\n        System.out.println(\"~a: \" + (~a)); // Output: -6\n\n        // Left Shift\n        System.out.println(\"a << 1: \" + (a << 1)); // Output: 10\n\n        // Right Shift\n        System.out.println(\"a >> 1: \" + (a >> 1)); // Output: 2\n\n        // Unsigned Right Shift\n        System.out.println(\"-5 >>> 1: \" + (-5 >>> 1)); // Output: 2147483645\n    }\n}"
      },
      {
        "question": "12. What is a singly linked list? Write a program to create and display a singly linked list.",
        "answer": "A singly linked list is a linear data structure in which each element (called a node) contains two parts: data and a reference (or link) to the next node in the sequence. The last node's reference points to null, indicating the end of the list. Singly linked lists are dynamic and allow for efficient insertion and deletion operations.",
        "code": "class Node {\n    int data;\n    Node next; // Reference to the next node\n\n    Node(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n\npublic class SinglyLinkedList {\n    private Node head; // Head of the linked list\n\n    // Method to add a new node to the linked list\n    public void addNode(int data) {\n        Node newNode = new Node(data);\n\n        if (head == null) {\n            head = newNode;\n        } else {\n            Node temp = head;\n            while (temp.next != null) {\n                temp = temp.next;\n            }\n            temp.next = newNode;\n        }\n    }\n\n    // Method to display the linked list\n    public void displayList() {\n        Node temp = head;\n        while (temp != null) {\n            System.out.print(temp.data + \" -> \");\n            temp = temp.next;\n        }\n        System.out.println(\"null\");\n    }\n\n    public static void main(String[] args) {\n        SinglyLinkedList list = new SinglyLinkedList();\n\n        // Adding nodes to the linked list\n        list.addNode(10);\n        list.addNode(20);\n        list.addNode(30);\n\n        // Displaying the linked list\n        System.out.println(\"Singly Linked List:\");\n        list.displayList();\n    }\n}"
      },
      {
        "question": "13. Write a program to accept a number from the command line and raise a user-defined exception if it is a negative number.",
        "answer": "The program demonstrates how to accept a number as a command-line argument, check if it is negative, and raise a user-defined exception if it is. User-defined exceptions are created by extending the Exception class.",
        "code": "class NegativeNumberException extends Exception {\n    public NegativeNumberException(String message) {\n        super(message);\n    }\n}\n\npublic class CustomExceptionDemo {\n    public static void main(String[] args) {\n        try {\n            if (args.length == 0) {\n                throw new IllegalArgumentException(\"Please provide a number as a command-line argument.\");\n            }\n\n            int number = Integer.parseInt(args[0]);\n\n            if (number < 0) {\n                throw new NegativeNumberException(\"Negative numbers are not allowed: \" + number);\n            }\n\n            System.out.println(\"The number is: \" + number);\n        } catch (NegativeNumberException e) {\n            System.out.println(\"Exception caught: \" + e.getMessage());\n        } catch (NumberFormatException e) {\n            System.out.println(\"Invalid input. Please enter a valid integer.\");\n        } catch (Exception e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n    }\n}"
      }
      
    ]
  },
  "wd": {
    "mcq": [
      {
        "question": "1. What does HTML stand for?",
        "options": ["a) HyperText Markup Language", "b) HyperTransfer Markup Language"],
        "correctAnswer": "a",
        "id": "wd-q1"
      }
    ],
    "onemarks": [
      {
        "question": "1. What is XML? Write down rules for XML declaration.",
        "answer": "XML (eXtensible Markup Language) is a markup language designed to store and transport data in a structured format. It allows developers to organize data in a simple, hierarchical structure that is readable by both humans and machines. XML is commonly used for data interchange between different platforms or systems.\n\n**Rules for XML Declaration:**\n1. **Start and End:** The XML declaration must begin with `<?xml` and end with `?>`.\n2. **Version Attribute:** The `version` attribute is mandatory and specifies the XML version (e.g., `version=\"1.0\"`).\n3. **Encoding Attribute (Optional):** Specifies the character encoding used, like `encoding=\"UTF-8\"`. This is recommended for compatibility.\n4. **Standalone Attribute (Optional):** Specifies whether the XML document depends on external DTD (`standalone=\"yes\"` or `standalone=\"no\"`).\n5. **No Extra Characters:** The XML declaration must be the very first line of the document without any whitespace or special characters before it.\n6. **Proper Attribute Order:** Attributes in the declaration should follow this order: version, encoding, and standalone.\n\nBy adhering to these rules, you ensure that the XML document is well-formed and complies with standard specifications.",
        "code": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<root>\n    <data>Example Content</data>\n</root>"
      },
      {
        "question": "2. What is a comment? How to add comments in XML?",
        "answer": "In XML, a comment is a line or block of text included in the document to provide explanations or notes for developers. Comments are ignored by the XML parser and do not appear in the output, ensuring they do not affect the functioning of the XML document.\n\n**Purpose of Comments in XML:**\n1. Provide documentation or explanations within the XML code.\n2. Help developers understand the structure or purpose of the XML.\n3. Temporarily disable certain parts of the XML code for debugging or testing.\n\n**How to Add Comments in XML:**\n- XML comments begin with `<!--` and end with `-->`.\n- They can span multiple lines but cannot be nested within another comment.\n\n**Example:**\n```xml\n<!-- This is a single-line comment -->\n<data>\n    <!-- This is a multi-line comment\n         explaining the XML structure -->\n    <item>Example</item>\n</data>\n```",
        "code": "<!-- This is a comment in XML -->\n<root>\n    <!-- Comments help explain the structure -->\n    <child>Example Content</child>\n</root>"
      },
      {
        "question": "3. Explain $(document).ready() function with example.",
        "answer": "$(document).ready() is a jQuery function that ensures the DOM (Document Object Model) is fully loaded and ready before executing any JavaScript or jQuery code. It prevents issues caused by attempting to manipulate elements before they are available in the DOM.\n\n**Key Features:**\n1. Ensures the script runs only after the HTML structure is completely loaded.\n2. Prevents JavaScript errors caused by uninitialized DOM elements.\n3. Useful for running initialization code, event binding, or DOM manipulation safely.",
        "code": "```javascript\n<!DOCTYPE html>\n<html>\n<head>\n    <title>$(document).ready() Example</title>\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n    <script>\n        $(document).ready(function() {\n            $(\"#btn\").click(function() {\n                $(\"#message\").text(\"The DOM is fully loaded and jQuery works!\");\n            });\n        });\n    </script>\n</head>\n<body>\n    <button id=\"btn\">Click Me</button>\n    <p id=\"message\"></p>\n</body>\n</html>\n```"
      },
      {
        "question": "4. What is the use of css() method of jQuery?",
        "answer": "The `css()` method in jQuery is used to get or set the CSS properties of HTML elements. It allows developers to modify the style dynamically at runtime, providing flexibility in styling the elements based on interactions or conditions.\n\n**Key Uses:**\n1. **Get CSS Properties:** Retrieve the current value of a specific CSS property.\n2. **Set CSS Properties:** Apply a single CSS property or multiple properties to selected elements dynamically.\n3. **Chaining Capabilities:** Use with other jQuery methods for streamlined code execution.\n\n**Syntax:**\n```javascript\n// To get the value of a property\n$(selector).css(propertyName);\n\n// To set a single property\n$(selector).css(propertyName, value);\n\n// To set multiple properties\n$(selector).css({\n    propertyName1: value1,\n    propertyName2: value2,\n    ...\n});\n```",
        "code": "```javascript\n// Example: Getting and Setting CSS properties\n$(document).ready(function() {\n    // Get the current background color of an element\n    let bgColor = $('#myElement').css('background-color');\n    console.log('Background color:', bgColor);\n\n    // Set a single CSS property\n    $('#myElement').css('color', 'blue');\n\n    // Set multiple CSS properties\n    $('#myElement').css({\n        'background-color': 'yellow',\n        'font-size': '20px'\n    });\n});\n```"
      },
      {
        "question": "5. What is JSON? How to create an array of numbers in JSON?",
        "answer": "JSON (JavaScript Object Notation) is a lightweight data-interchange format that is easy to read and write for humans and easy to parse and generate for machines. It is widely used for exchanging data between client and server in web applications.",
        "code": "const jsonArray = {\n    \"numbers\": [1, 2, 3, 4, 5]\n};\nconsole.log(jsonArray.numbers);\n"
      },
      {
        "question": "6. What is the difference between JSON and XML?",
        "answer": "JSON (JavaScript Object Notation) and XML (eXtensible Markup Language) are both formats for representing structured data, but they differ in design, readability, and use cases:",
        "code": "'**Format:**\n'JSON: Lightweight and concise format for data representation.\n'XML: Verbose and uses a tag-based structure.\n\n'**Readability:**\n'JSON: Easier for humans to read and write.\n'XML: More complex and harder to read due to excessive use of tags.\n\n'**Data Type Support:**\n'JSON: Supports various data types like numbers, strings, booleans, arrays, objects, and null.\n'XML: Represents everything as text; type inference is necessary.\n\n'**Structure:**\n'JSON: Uses a key-value pair model that is intuitive and minimal.\n'XML: Uses nested elements to represent data, resembling a tree-like structure.\n\n'**Usage:**\n'JSON: Frequently used in APIs and data interchange between web clients and servers.\n'XML: Commonly used in document storage and configurations.\n\n'**Parsing:**\n'JSON: Faster and maps directly to JavaScript objects, enhancing performance.\n'XML: Slower due to its complex nature and dependency on parsing libraries.\n\n'**Extensibility:**\n'JSON: Limited extensibility.\n'XML: Allows custom tags, making it highly extensible.\n\n'**Metadata Handling:**\n'JSON: Metadata is embedded directly into the structure.\n'XML: Attributes are used to hold metadata.\n\n'**Whitespace Handling:**\n'JSON: Ignores most whitespace.\n'XML: Whitespace is considered significant and can affect parsing.'"
      },
      {
        "question": "7. List out various properties of XMLHttpRequest object.",
        "answer": "The XMLHttpRequest object is used to interact with servers and exchange data asynchronously. It is commonly employed in AJAX programming for making HTTP requests and receiving responses dynamically.",
        "code": "'**readyState:**\n'Indicates the current state of the XMLHttpRequest. Values range from 0 to 4 (e.g., 0: UNSENT, 4: DONE).\n\n'**status:**\n'Provides the HTTP status code of the server response (e.g., 200 for OK, 404 for Not Found).\n\n'**statusText:**\n'Gives a text description of the HTTP status code (e.g., 'OK', 'Not Found').\n\n'**responseText:**\n'Contains the server response as a text string.\n\n'**responseXML:**\n'Returns the server response as an XML document if applicable.\n\n'**responseType:**\n'Specifies the expected type of data in the response (e.g., 'text', 'json', 'document').\n\n'**timeout:**\n'Sets or retrieves the time in milliseconds after which a request times out.\n\n'**onreadystatechange:**\n'Defines a function to be executed whenever the readyState changes.\n\n'**withCredentials:**\n'Indicates whether credentials such as cookies or authorization headers should be sent with cross-site requests.'"
      },
      {
        "question": "8. What is the difference between synchronous and asynchronous requests?",
        "answer": "Synchronous and asynchronous requests vary in how they process requests and manage the execution flow in programming applications.\n\n1. **Synchronous Requests:**\n   - Requests are processed in a sequential manner, blocking further execution until the current request is completed.\n   - They may cause delays since other tasks must wait for the request's response to continue.\n\n2. **Asynchronous Requests:**\n   - Requests are processed without blocking further execution, allowing other tasks to proceed simultaneously while waiting for a response.\n   - They use callbacks, promises, or async/await to handle responses without interrupting the program's flow.",
        "code": "<!-- Example of a Synchronous Request -->\nvar result = httpRequest('GET', '/data'); // Blocks until the request is complete.\nconsole.log(result);\n\n<!-- Example of an Asynchronous Request -->\nhttpRequest('GET', '/data', function(result) {\n    console.log(result);\n});\nconsole.log('Request made, waiting for response.');"
      },
      {
        "question": "9. Explain require() function of Node.js?",
        "answer": "The `require()` function in Node.js is a fundamental feature of the CommonJS module system. It is used to include and utilize modules in an application. These modules can be built-in Node.js modules, community-based modules, or user-defined modules. It helps in organizing code and enhances reusability in Node.js applications.",
        "code": "<!-- Including Built-in Modules -->\nvar http = require('http'); // Includes the HTTP module.\n\n<!-- Including User-defined Modules -->\nconst myModule = require('./myModule'); // Includes a local file named 'myModule'.\n\n<!-- Return Value -->\nvar module = require('module_name'); // Requires a module and returns its exported object."
      },
      {
        "question": "10. Explain the HTTP module of Node.js?",
        "answer": "The HTTP module in Node.js enables developers to create HTTP servers and clients. It provides essential tools for building web applications that transfer data using the HyperText Transfer Protocol (HTTP). This module allows Node.js to handle HTTP requests asynchronously, making it an integral part of web development.",
        "code": "<!-- Importing the HTTP Module -->\nvar http = require('http'); // Includes the HTTP module.\n\n<!-- Creating an HTTP Server -->\nhttp.createServer(function (req, res) {\n    res.write('Hello World!'); // Sends a response to the client.\n    res.end(); // Ends the response process.\n}).listen(8080); // Listens on port 8080.\n\n<!-- Serving HTML Content with HTTP Headers -->\nvar http = require('http');\nhttp.createServer(function (req, res) {\n    res.writeHead(200, {'Content-Type': 'text/html'}); // Sets the Content-Type header.\n    res.write('<h1>Hello World!</h1>'); // Sends HTML content to the client.\n    res.end(); // Ends the response process.\n}).listen(8080); // The server listens on port 8080."
      }
      
    ],
    "long": [
      {
        "question": "1. Explain XML syntax for declaration, tags, and elements.",
        "answer": "XML syntax establishes rules for creating structured and well-formed XML documents. It includes the following components:\n\n1. **XML Declaration:**\n   - Declares the XML version and optionally specifies the character encoding and standalone attributes.\n\n2. **XML Tags:**\n   - Tags define the document structure and enclose data or elements with an opening and closing tag.\n\n3. **XML Elements:**\n   - Elements are the building blocks of an XML document. They may contain text, nested elements, or both. Empty elements are allowed and must be self-closed.",
        "code": "<!-- XML Declaration Example -->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!-- XML Tags Example -->\n<greeting>Hello, XML!</greeting>\n\n<!-- XML Elements Example -->\n<book>\n    <title>XML Basics</title>\n    <author>John Doe</author>\n</book>"
      },
      {
        "question": "2. Explain various methods related to jQuery effects.",
        "answer": "jQuery provides a rich set of methods to create and manage effects, making web pages more interactive and visually appealing. These methods are often used to manipulate the visibility, opacity, position, or animation of HTML elements.",
        "code": "<!-- Example of jQuery Effect Methods -->\n\n<!-- 1. show(): Displays the selected elements. -->\n$('#element').show();\n\n<!-- 2. hide(): Hides the selected elements. -->\n$('#element').hide();\n\n<!-- 3. toggle(): Toggles the visibility of elements. -->\n$('#element').toggle();\n\n<!-- 4. fadeIn(): Fades in the selected elements. -->\n$('#element').fadeIn();\n\n<!-- 5. fadeOut(): Fades out the selected elements. -->\n$('#element').fadeOut();\n\n<!-- 6. fadeToggle(): Toggles fade in and fade out. -->\n$('#element').fadeToggle();\n\n<!-- 7. slideDown(): Slides down the selected elements. -->\n$('#element').slideDown();\n\n<!-- 8. slideUp(): Slides up the selected elements. -->\n$('#element').slideUp();\n\n<!-- 9. slideToggle(): Toggles between sliding up and down. -->\n$('#element').slideToggle();\n\n<!-- 10. animate(): Custom animations on elements. -->\n$('#element').animate({\n    left: '50px',\n    opacity: 0.5\n});"
      },
      {
        "question": "3. Explain working of AJAX and its architecture.",
        "answer": "AJAX (Asynchronous JavaScript and XML) is a web development technique used to create dynamic, responsive web pages by exchanging data with a web server asynchronously. It enables web applications to send and receive data without requiring a full page reload.\n\n**AJAX Architecture Components:**\n1. **Browser:**\n   - Sends user events (e.g., clicks, form submissions) and receives updated content dynamically without a page reload.\n\n2. **JavaScript:**\n   - Handles asynchronous requests using the `XMLHttpRequest` object or the `Fetch API`.\n   - Processes the responses from the server and updates the web page content dynamically.\n\n3. **XMLHttpRequest Object:**\n   - Manages the asynchronous communication between the browser and the server.\n\n4. **Web Server:**\n   - Processes requests received from the client and sends appropriate responses (e.g., JSON, XML, HTML).\n\n5. **Database:**\n   - Stores and retrieves data requested by the server to deliver dynamic content.",
        "code": "<!-- Example of an AJAX Request -->\n\n<!-- JavaScript Code for AJAX Request -->\nconst xhr = new XMLHttpRequest();\nxhr.open('GET', 'https://api.example.com/data', true); // Asynchronous Request\nxhr.onload = function() {\n    if (xhr.status === 200) {\n        console.log(xhr.responseText); // Process and display the response\n    }\n};\nxhr.send();"
      },
      {
        "question": "4. Write a note on jQuery selectors.",
        "answer": "jQuery selectors are used to select and manipulate HTML elements in a document. They are based on CSS selectors, making them intuitive and easy to use. jQuery selectors allow developers to perform actions on one or multiple elements by targeting them through their ID, class, attribute, or other properties.\n\n**Types of jQuery Selectors:**\n\n1. **Basic Selectors:** Target elements based on tag names, IDs, or classes.\n2. **Hierarchy Selectors:** Select elements based on their relationship to other elements.\n3. **Attribute Selectors:** Target elements with specific attributes or attribute values.\n4. **Form Selectors:** Specifically designed to target form elements.\n5. **Content Selectors:** Select elements based on their content (e.g., text nodes).",
        "code": "<!-- Example of jQuery Selectors -->\n\n<!-- Basic Selector (ID Selector) -->\n$('#elementID');\n\n<!-- Class Selector -->\n$('.className');\n\n<!-- Tag Selector -->\n$('tagName');\n\n<!-- Attribute Selector -->\n$('[attribute=\"value\"]');\n\n<!-- Hierarchy Selector -->\n$('parent child'); // Selects child elements within a parent element.\n\n<!-- Form Selector -->\n$(':input'); // Selects all form elements."
      },
      {
        "question": "5. Explain XMLHttpRequest technology.",
        "answer": "XMLHttpRequest (XHR) technology is a web API that allows browsers to communicate with servers asynchronously. It is a core part of AJAX, enabling developers to create dynamic and interactive web applications by fetching and sending data without requiring a full page reload. XHR is capable of handling various data formats like JSON, XML, and plain text, making it versatile for modern web development.\n\n**Features:**\n1. Supports asynchronous and synchronous HTTP requests.\n2. Compatible with various HTTP methods such as GET, POST, PUT, and DELETE.\n3. Monitors progress and handles errors using event listeners like `onreadystatechange`.\n4. Dynamically updates parts of a webpage without affecting its overall performance.",
        "code": "<!-- Example of XMLHttpRequest Usage -->\n\n<!-- Initialize an XMLHttpRequest object -->\nconst xhr = new XMLHttpRequest();\n\n<!-- Configure the request -->\nxhr.open('GET', 'https://api.example.com/data', true);\n\n<!-- Define a callback function for state changes -->\nxhr.onreadystatechange = function() {\n    if (xhr.readyState === 4 && xhr.status === 200) {\n        console.log(xhr.responseText); // Handle the response data\n    }\n};\n\n<!-- Send the request -->\nxhr.send();"
      },
      {
        "question": "6. Explain user-defined module in Node.js.",
        "answer": "In Node.js, user-defined modules are JavaScript files that contain custom functionalities, allowing developers to reuse and organize code efficiently. These modules are created using the `exports` keyword, which enables functions, objects, or variables to be shared across different files by importing them with the `require` keyword. This promotes modular programming and better code management.",
        "code": "<!-- Example of a User-defined Module -->\n\n<!-- Create a user-defined module (calc.js) -->\nexports.add = function(x, y) {\n    return x + y;\n};\nexports.sub = function(x, y) {\n    return x - y;\n};\nexports.mult = function(x, y) {\n    return x * y;\n};\nexports.div = function(x, y) {\n    return x / y;\n};\n\n<!-- Import and use the module in another file (app.js) -->\nconst calculator = require('./calc');\nlet x = 50, y = 20;\nconsole.log(\"Addition: \" + calculator.add(x, y));\nconsole.log(\"Subtraction: \" + calculator.sub(x, y));\nconsole.log(\"Multiplication: \" + calculator.mult(x, y));\nconsole.log(\"Division: \" + calculator.div(x, y));"
      },
      {
        "question": "7. Explain with example how to create an array of objects in JSON.",
        "answer": "In JSON, an array of objects consists of multiple objects grouped together within square brackets `[]`. Each object is enclosed in curly braces `{}` and contains key-value pairs. This structure is commonly used to represent complex data, such as a list of items or records.",
        "code": "<!-- Example of an Array of Objects in JSON -->\n\n{\n    \"employees\": [\n        {\n            \"name\": \"John\",\n            \"age\": 30,\n            \"department\": \"HR\"\n        },\n        {\n            \"name\": \"Jane\",\n            \"age\": 25,\n            \"department\": \"Finance\"\n        },\n        {\n            \"name\": \"Mark\",\n            \"age\": 40,\n            \"department\": \"IT\"\n        }\n    ]\n}\n\n<!-- Explanation -->\n<!-- This JSON object contains an array named 'employees', where each entry represents an individual employee's details. -->"
      },
      {
        "question": "8. Create an XML document that represents semester-wise subjects taught in B.C.A. each subject has subject code and name associated with it.",
        "answer": "Below is an example of an XML document representing semester-wise subjects in B.C.A.",
        "code": "<semesters>\n    <semester id=\"1\">\n        <subject code=\"BCA101\">Mathematics</subject>\n        <subject code=\"BCA102\">Computer Fundamentals</subject>\n    </semester>\n    <semester id=\"2\">\n        <subject code=\"BCA201\">Programming in C</subject>\n        <subject code=\"BCA202\">Digital Logic</subject>\n    </semester>\n    <semester id=\"3\">\n        <subject code=\"BCA301\">Data Structures</subject>\n        <subject code=\"BCA302\">Database Management Systems</subject>\n    </semester>\n</semesters>"
      },
      {
        "question": "9. Create a JSON object that represents details of 5 employees. Each employee has certain fields like empCode, fullName, salary, designation, birthDate, languagesknown, etc.",
        "answer": "Below is an example of a JSON object with employee details.",
        "code": "{\n    \"employees\": [\n        {\n            \"empCode\": \"E001\",\n            \"fullName\": \"John Doe\",\n            \"salary\": 50000,\n            \"designation\": \"Developer\",\n            \"birthDate\": \"1990-01-15\",\n            \"languagesKnown\": [\"English\", \"Spanish\"]\n        },\n        {\n            \"empCode\": \"E002\",\n            \"fullName\": \"Jane Smith\",\n            \"salary\": 60000,\n            \"designation\": \"Manager\",\n            \"birthDate\": \"1985-06-20\",\n            \"languagesKnown\": [\"English\", \"German\"]\n        },\n        {\n            \"empCode\": \"E003\",\n            \"fullName\": \"Emily Johnson\",\n            \"salary\": 55000,\n            \"designation\": \"Analyst\",\n            \"birthDate\": \"1992-09-10\",\n            \"languagesKnown\": [\"English\", \"French\"]\n        },\n        {\n            \"empCode\": \"E004\",\n            \"fullName\": \"Michael Brown\",\n            \"salary\": 52000,\n            \"designation\": \"Designer\",\n            \"birthDate\": \"1988-03-25\",\n            \"languagesKnown\": [\"English\", \"Italian\"]\n        },\n        {\n            \"empCode\": \"E005\",\n            \"fullName\": \"Sarah Wilson\",\n            \"salary\": 48000,\n            \"designation\": \"Tester\",\n            \"birthDate\": \"1994-11-05\",\n            \"languagesKnown\": [\"English\"]\n        }\n    ]\n}"
      },
      {
        "question": "10. What is the Node.js File System Module?",
        "answer": "The Node.js File System (fs) module provides a set of methods to work with files and directories on your computer. It enables operations such as reading, creating, updating, deleting, and renaming files. The module supports both synchronous and asynchronous methods, making it suitable for various use cases.",
        "code":"\nreadFile: const fs = require('fs');\nfs.readFile('example.txt', 'utf8', (err, data) => {\n    if (err) throw err;\n    console.log(data);\n});,\nwriteFile: const fs = require('fs');\nfs.writeFile('example.txt', 'Hello, World!', (err) => {\n    if (err) throw err;\n    console.log('File written successfully!');\n});,\nappendFile: const fs = require('fs');\nfs.appendFile('example.txt', ' Additional content.', (err) => {\n    if (err) throw err;\n    console.log('Content appended successfully!');\n});,\ndeleteFile: const fs = require('fs');\nfs.unlink('example.txt', (err) => {\n    if (err) throw err;\n    console.log('File deleted successfully!');\n});,\nrenameFile: const fs = require('fs');\nfs.rename('example.txt', 'new_example.txt', (err) => {\n    if (err) throw err;\n    console.log('File renamed successfully!');\n});"
        
    },
    {
      "question": "11. Explain JSON Data Types in detail.",
      "answer": "JSON (JavaScript Object Notation) is a text-based format for storing and exchanging data. It is language-independent but uses conventions from JavaScript, making it easy to read and write. JSON supports a limited set of data types, which are essential for structuring data in a consistent and predictable manner. These data types are used to represent values within JSON objects and arrays.\n\n#### Supported JSON Data Types\nJSON defines the following six data types, each with specific rules and purposes:\n\n1. **String**\n   - **Definition**: A sequence of zero or more Unicode characters enclosed in double quotes (`\"...\"`).\n   - **Characteristics**: Supports escape sequences (e.g., `\\\"`, `\\n`, `\\t`), is case-sensitive, and immutable.\n   - **Example**: `\"Hello, World!\"`, `\"123\"`, `\"user@example.com\"`.\n   - **Use Case**: Representing text data such as names, emails, or messages.\n\n2. **Number**\n   - **Definition**: A numeric value that can be an integer or a floating-point number.\n   - **Characteristics**: No distinction between integer and float, supports negative values and exponential notation (e.g., `1.5e3`), does not support octal or hexadecimal formats directly.\n   - **Example**: `42`, `-17.5`, `3.14159`, `1e-10`.\n   - **Use Case**: Representing quantities, measurements, or identifiers (e.g., age, price).\n\n3. **Boolean**\n   - **Definition**: A logical value that can be either `true` or `false`.\n   - **Characteristics**: Case-sensitive; only lowercase `true` and `false` are valid, used to represent binary states.\n   - **Example**: `true`, `false`.\n   - **Use Case**: Indicating status (e.g., `isActive: true`, `isDeleted: false`).\n\n4. **Null**\n   - **Definition**: A special value representing the absence of a value or a null reference.\n   - **Characteristics**: Case-sensitive; only lowercase `null` is valid, indicates an intentionally empty or undefined field.\n   - **Example**: `null`.\n   - **Use Case**: Representing missing or uninitialized data (e.g., `lastLogin: null`).\n\n5. **Object**\n   - **Definition**: An unordered collection of key-value pairs enclosed in curly braces `{}`.\n   - **Characteristics**: Keys must be strings in double quotes, values can be any JSON data type, key-value pairs are separated by commas with a colon `:` between key and value.\n   - **Example**: `{\"name\": \"Alice\", \"age\": 25, \"isStudent\": false}`.\n   - **Use Case**: Structuring complex data like user profiles or product details.\n\n6. **Array**\n   - **Definition**: An ordered, comma-separated list of values enclosed in square brackets `[]`.\n   - **Characteristics**: Values can be any JSON data type, including nested objects or arrays, order is preserved, can be empty or contain mixed types.\n   - **Example**: `[1, \"two\", true, {\"key\": \"value\"}, [3, 4]]`.\n   - **Use Case**: Representing lists such as a collection of items, scores, or user roles.\n\n#### Additional Notes\n- **No Other Types**: JSON does not natively support complex types like functions, dates (though strings can represent dates), or undefined values.\n- **Interoperability**: These types ensure compatibility across languages and platforms when parsing JSON.\n- **Validation**: Tools like JSON Schema can enforce type constraints in data exchange.",
      "code": ""
    },
    {
      "question": "12. Explain jQuery Events in detail.",
      "answer": "jQuery provides a powerful event-handling mechanism that allows developers to attach and manage events easily. Events are actions or occurrences that happen in the browser, such as clicks, key presses, form submissions, and mouse movements. jQuery simplifies event binding, handling, and delegation, making event-driven programming more efficient.\n\n#### Types of jQuery Events\njQuery categorizes events into several types based on their functionality:\n\n1. **Mouse Events**\n   - These events are triggered by mouse interactions with elements.\n   - **Common Mouse Events**:\n     - `click()`: Fires when an element is clicked.\n     - `dblclick()`: Fires when an element is double-clicked.\n     - `mouseenter()`, `mouseleave()`: Triggers when the mouse enters or leaves an element.\n     - `mouseover()`, `mouseout()`: Similar to `mouseenter` and `mouseleave` but bubbles up the DOM.\n     - `mousedown()`, `mouseup()`: Fires when a mouse button is pressed or released over an element.\n     - `mousemove()`: Fires when the mouse moves within an element.\n\n2. **Keyboard Events**\n   - These events handle keyboard interactions.\n   - **Common Keyboard Events**:\n     - `keydown()`: Fires when a key is pressed down.\n     - `keyup()`: Fires when a key is released.\n     - `keypress()`: Fires when a key is pressed (deprecated, use `keydown` instead).\n\n3. **Form Events**\n   - These events handle form interactions.\n   - **Common Form Events**:\n     - `submit()`: Triggers when a form is submitted.\n     - `change()`: Triggers when the value of an input field changes.\n     - `focus()`, `blur()`: Triggers when an element gains or loses focus.\n     - `input()`: Triggers when a user inputs text into a field.\n     - `select()`: Fires when text inside an input field is selected.\n\n4. **Window Events**\n   - These events handle interactions with the browser window.\n   - **Common Window Events**:\n     - `resize()`: Fires when the window is resized.\n     - `scroll()`: Fires when the page is scrolled.\n     - `load()`: Fires when the page and all assets (images, scripts) are fully loaded.\n     - `unload()`: Fires when the page is being unloaded (deprecated, use `beforeunload`).\n     - `beforeunload()`: Fires when the user tries to leave the page.\n\n5. **Event Binding Methods**\n   - **`.on()`**: The recommended way to attach events (supports event delegation).\n   - **`.off()`**: Removes an event handler from an element.\n   - **`.one()`**: Attaches an event handler that executes only once per element.\n   - **`.trigger()`**: Manually triggers an event.\n   - **`.hover()`**: A shorthand for `mouseenter` and `mouseleave`.\n\n6. **Event Delegation**\n   - Event delegation is useful for dynamically added elements.\n   - Instead of binding an event to each child element, you bind it to a parent element and use `on()`:\n     ```javascript\n     $(\"#parent\").on(\"click\", \".child\", function() {\n       alert(\"Child clicked!\");\n     });\n     ```\n   - This improves performance and ensures events work on dynamically added elements.\n\n#### Additional Notes\n- jQuery normalizes event behavior across different browsers.\n- Use event delegation for dynamic content.\n- Always unbind events when no longer needed to prevent memory leaks.\n- Avoid using deprecated event methods like `bind()` and `live()`.\n\njQuery events simplify handling user interactions, making it easier to create interactive web applications.",
      "code": ""
    },
    {
      "question": "13. Jquery string in Node.js?",
      "answer": "Since jQuery is built for the browser and does not run in a Node.js environment, we use alternative methods for string manipulation in Node.js. A common approach is to use the `Cheerio` library, which provides a jQuery-like syntax for working with HTML strings on the server.\n\n### Using Cheerio in Node.js\nCheerio allows us to parse and manipulate HTML strings as we would with jQuery in the browser.\n\n#### 1. **Installation**\nTo install Cheerio in a Node.js project, run:\n```sh\nnpm install cheerio\n```\n\n#### 2. **Basic Example**\nUsing Cheerio to manipulate an HTML string:\n```javascript\nconst cheerio = require(\"cheerio\");\n\n// Sample HTML string\nconst htmlString = \"<div id='content'><p>Hello, <strong>Node.js</strong>!</p></div>\";\n\n// Load HTML into Cheerio\nconst $ = cheerio.load(htmlString);\n\n// Manipulate elements like jQuery\n$(\"p\").append(\" How are you?\");\n\nconsole.log($(\"#content\").html());\n// Output: <p>Hello, <strong>Node.js</strong>! How are you?</p>\n```\n\n#### 3. **String Manipulation in Node.js (Without jQuery)**\nFor pure string operations in Node.js, you can use built-in JavaScript methods like:\n- `.replace()`: Replaces a substring.\n- `.toUpperCase()`, `.toLowerCase()`: Changes case.\n- `.trim()`: Removes whitespace.\n- `.split()`, `.join()`: Splits and joins strings.\n\nExample:\n```javascript\nlet str = \"Hello, jQuery in Node.js!\";\nstr = str.replace(\"jQuery\", \"Cheerio\");\nconsole.log(str); // Output: Hello, Cheerio in Node.js!\n```\n\n#### 4. **Using Template Strings**\nTemplate literals (backticks) provide an easy way to format strings in Node.js:\n```javascript\nlet name = \"Developer\";\nlet message = `Welcome, ${name}!`;\nconsole.log(message); // Output: Welcome, Developer!\n```\n\n### Conclusion\nWhile jQuery itself cannot run in Node.js, Cheerio provides similar functionality for working with HTML strings. For general string manipulation, JavaScript’s built-in string methods are sufficient.",
      "code": ""
    }
    
    
        
    
    ]
  },
  "mad": {
    "mcq": [
      {
        "question": "1. OnCheckedChangeListener can be used with which control?",
        "options": ["a) Button", "b) CheckBox", "c) Both Button & CheckBox", "d) None of the above"],
        "correctAnswer": "b",
        "id": "mad-q1"
      },
      {
        "question": "2. Converts class file into dex file.",
        "options": ["a) javac", "b) dx", "c) dex compiler", "d) DVM"],
        "correctAnswer": "c",
        "id": "mad-q2"
      },
      {
        "question": "3. In AlertDialog, which method is used to keep the DialogBox open even if the Back button is pressed?",
        "options": ["a) setCancelable(false)", "b) setCancelable(true)", "c) setHidden(false)", "d) setHidden(true)"],
        "correctAnswer": "a",
        "id": "mad-q3"
      },
      {
        "question": "4. What is true about the R.java file?",
        "options": ["a) It is an auto-generated file which contains resource IDs of all resources.", "b) It is an auto-generated file which contains configuration settings.", "c) It is an auto-generated file which contains string objects.", "d) None of the above"],
        "correctAnswer": "a",
        "id": "mad-q4"
      },
      {
        "question": "5. Which are views that display a long list of items?",
        "options": ["a) ListView", "b) Specialised Fragments", "c) FrameView", "d) None"],
        "correctAnswer": "a",
        "id": "mad-q5"
      },
      {
        "question": "6. What are the correct types of progress available in Android?",
        "options": ["a) Spinning wheel and horizontal bar", "b) Vertical bar", "c) Circle wheel", "d) None of these"],
        "correctAnswer": "a",
        "id": "mad-q6"
      },
      {
        "question": "7. The method of ImageSwitcher provides implementation of the ViewFactory interface.",
        "options": ["a) ViewFactory()", "b) setFactory()", "c) Factory()", "d) GetFactory()"],
        "correctAnswer": "b",
        "id": "mad-q7"
      },
      {
        "question": "8. If you don't want to change the variable value, which keyword needs to be used?",
        "options": ["a) Def", "b) Const", "c) Constant", "d) Fixed"],
        "correctAnswer": "b",
        "id": "mad-q8"
      },
      {
        "question": "9. What is an entry point in Dart?",
        "options": ["a) declare()", "b) list()", "c) main()", "d) return()"],
        "correctAnswer": "c",
        "id": "mad-q9"
      },
      {
        "question": "10. What is the full form of AOT?",
        "options": ["a) Ahead Of Time", "b) After Of Time", "c) Ahead Of Temp", "d) Accrued Of Temp"],
        "correctAnswer": "a",
        "id": "mad-q10"
      },
      {
        "question": "11. Which of the following is an invisible widget?",
        "options": ["a) RadioButton", "b) CheckBox", "c) Column", "d) None of the above"],
        "correctAnswer": "c",
        "id": "mad-q11"
      },
      {
        "question": "12. Which widget changes its description dynamically during its lifecycle?",
        "options": ["a) Stateful Widget", "b) Stateless Widget", "c) Visible Widget", "d) Invisible Widget"],
        "correctAnswer": "a",
        "id": "mad-q12"
      },
      {
        "question": "13. Which is a widget in Flutter that combines a list of widgets and positions them on top of each other?",
        "options": ["a) The Stack", "b) The Points", "c) The List", "d) The Form"],
        "correctAnswer": "a",
        "id": "mad-q13"
      },
      {
        "question": "14. Which is a material design class in Flutter that provides text labels to explain functionality?",
        "options": ["a) Tooltip", "b) FlutterForm", "c) Charts", "d) Switches"],
        "correctAnswer": "a",
        "id": "mad-q14"
      }
      
    ],
    "onemarks": [
      
      
    ],
    "long": [
      {
        "question": "1. How to create dynamic RadioButton in Android?",
        "answer": "Dynamic RadioButtons in Android can be created programmatically in Java or Kotlin. This involves creating `RadioButton` objects at runtime, adding them to a `RadioGroup`, and attaching the group to a layout dynamically.\n\n**Steps to Create Dynamic RadioButtons:**\n1. Create a `RadioGroup` programmatically or access an existing one from the XML layout.\n2. Create `RadioButton` instances dynamically using a loop or based on a data source.\n3. Add each `RadioButton` to the `RadioGroup` using the `addView()` method.\n4. Define OnClickListeners for event handling when a RadioButton is selected.\n\nBelow is an example implementation:",
        "code": "import android.os.Bundle;\nimport android.widget.LinearLayout;\nimport android.widget.RadioButton;\nimport android.widget.RadioGroup;\nimport android.widget.Toast;\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class DynamicRadioButtonActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // Access the layout where RadioGroup will be added\n        LinearLayout layout = findViewById(R.id.linearLayout);\n\n        // Create a RadioGroup dynamically\n        RadioGroup radioGroup = new RadioGroup(this);\n        radioGroup.setOrientation(RadioGroup.VERTICAL);\n\n        // Array of options\n        String[] options = {\"Option 1\", \"Option 2\", \"Option 3\"};\n\n        // Dynamically create RadioButtons and add them to the RadioGroup\n        for (String option : options) {\n            RadioButton radioButton = new RadioButton(this);\n            radioButton.setText(option);\n            radioGroup.addView(radioButton);\n        }\n\n        // Add the RadioGroup to the layout\n        layout.addView(radioGroup);\n\n        // Set an OnCheckedChangeListener for the RadioGroup\n        radioGroup.setOnCheckedChangeListener((group, checkedId) -> {\n            RadioButton selectedRadioButton = findViewById(checkedId);\n            Toast.makeText(this, \"Selected: \" + selectedRadioButton.getText(), Toast.LENGTH_SHORT).show();\n        });\n    }\n}"
      },
      {
        "question": "2. Write a short note on Android Manifest.",
        "answer": "The Android Manifest is an essential configuration file (`AndroidManifest.xml`) in every Android application. It acts as a blueprint that provides information to the Android operating system about the app's structure and functionality.\n\n**Key Features of the Android Manifest:**\n1. **Package Name:** Unique identifier for the application.\n2. **Components Declaration:** Specifies all app components like Activities, Services, Broadcast Receivers, and Content Providers.\n3. **Permissions:** Lists required permissions such as Internet access or camera usage.\n4. **Features:** Declares hardware or software features needed by the app.\n5. **Intent Filters:** Defines how the app interacts with external apps and intents.\n\n**Example Manifest Snippet:**",
        "code": "<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.myapp\">\n\n    <application\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\">\n        <activity android:name=\".MainActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n\n    <!-- Permission declaration -->\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n\n</manifest>"
      },
      {
        "question": "3. Explain AutoCompleteTextView and TextWatcher in detail.",
        "answer": "**AutoCompleteTextView:**\nAutoCompleteTextView is a UI widget in Android that extends the EditText class. It provides suggestions to users as they type, enabling an efficient and user-friendly search or input experience. It works with an Adapter that supplies a list of suggestions to display.\n\n**Key Features:**\n1. Displays dropdown suggestions based on user input.\n2. Reduces typing effort and error rates.\n3. Customizable to integrate data from APIs, databases, or predefined lists.\n\n**TextWatcher:**\nTextWatcher is an interface in Android used to monitor changes in the text of an EditText or AutoCompleteTextView. Developers implement this interface to perform actions or validations whenever the text content changes.\n\n**Key Methods:**\n1. `afterTextChanged(Editable s)`: Called after the text has been changed.\n2. `beforeTextChanged(CharSequence s, int start, int count, int after)`: Called before the text change happens.\n3. `onTextChanged(CharSequence s, int start, int before, int count)`: Called while the text is being changed.\n\nHere’s an example that demonstrates the use of AutoCompleteTextView with a TextWatcher:",
        "code": "import android.os.Bundle;\nimport android.text.Editable;\nimport android.text.TextWatcher;\nimport android.widget.ArrayAdapter;\nimport android.widget.AutoCompleteTextView;\nimport android.widget.Toast;\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class AutoCompleteTextWatcherExample extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // AutoCompleteTextView Setup\n        AutoCompleteTextView autoCompleteTextView = findViewById(R.id.autoCompleteTextView);\n        String[] suggestions = {\"Apple\", \"Banana\", \"Cherry\", \"Date\", \"Fig\", \"Grape\"};\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_dropdown_item_1line, suggestions);\n        autoCompleteTextView.setAdapter(adapter);\n\n        // Adding TextWatcher to the AutoCompleteTextView\n        autoCompleteTextView.addTextChangedListener(new TextWatcher() {\n            @Override\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n                // Action before text changes\n            }\n\n            @Override\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\n                // Action while text changes\n                Toast.makeText(AutoCompleteTextWatcherExample.this, \"Text Changed: \" + s, Toast.LENGTH_SHORT).show();\n            }\n\n            @Override\n            public void afterTextChanged(Editable s) {\n                // Action after text changes\n            }\n        });\n    }\n}"
      },
      {
        "question": "4. Explain Alert Dialog Box in Android.",
        "answer": "An Alert Dialog Box in Android is a pop-up window that prompts users to make a decision or provide input. It is used for actions that require immediate attention, such as confirmations, warnings, or messages.\n\n**Key Components:**\n1. **Title:** Short description of the dialog's purpose (optional).\n2. **Message:** Main content or explanation to display.\n3. **Buttons:** Includes Positive (e.g., Yes/OK), Negative (e.g., No/Cancel), and Neutral buttons for actions.\n4. **Custom Layout (Optional):** Can include input fields or other UI elements for interaction.\n\n**Advantages:**\n- Ensures immediate user feedback.\n- Provides intuitive handling for critical actions or confirmation.\n\nHere is a code example to implement an Alert Dialog Box in Android:",
        "code": "import android.app.AlertDialog;\nimport android.content.DialogInterface;\nimport android.os.Bundle;\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class AlertDialogExample extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // Button to trigger Alert Dialog\n        findViewById(R.id.button).setOnClickListener(v -> {\n            AlertDialog.Builder builder = new AlertDialog.Builder(this);\n            builder.setTitle(\"Confirmation\")\n                   .setMessage(\"Are you sure you want to proceed?\")\n                   .setPositiveButton(\"Yes\", (dialog, which) -> {\n                       // Positive action\n                       System.out.println(\"User clicked Yes!\");\n                   })\n                   .setNegativeButton(\"No\", (dialog, which) -> {\n                       // Negative action\n                       System.out.println(\"User clicked No!\");\n                   })\n                   .setNeutralButton(\"Cancel\", (dialog, which) -> {\n                       // Neutral action\n                       System.out.println(\"User clicked Cancel!\");\n                   });\n            builder.show();\n        });\n    }\n}"
      },
      {
        "question": "5. Explain Date and Time Picker in detail.",
        "answer": "A Date and Time Picker is a user-friendly interface component that allows users to select dates, times, or both in mobile or web applications. These pickers are commonly used for forms, booking systems, and scheduling apps, ensuring that date and time inputs are accurate and intuitive.\n\n**Advantages:**\n1. Simplifies date and time selection.\n2. Ensures input validation (e.g., valid dates and times).\n3. Provides a customizable UI for better user experience.\n\nHere is an implementation example in Android using `DatePickerDialog` and `TimePickerDialog`:",
        "code": "import android.app.DatePickerDialog;\nimport android.app.TimePickerDialog;\nimport android.os.Bundle;\nimport android.widget.TextView;\nimport androidx.appcompat.app.AppCompatActivity;\nimport java.util.Calendar;\n\npublic class DateTimePickerExample extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        TextView dateTextView = findViewById(R.id.dateTextView);\n        TextView timeTextView = findViewById(R.id.timeTextView);\n        Calendar calendar = Calendar.getInstance();\n\n        // Date Picker\n        dateTextView.setOnClickListener(v -> {\n            DatePickerDialog datePickerDialog = new DatePickerDialog(this,\n                (view, year, month, dayOfMonth) -> {\n                    String selectedDate = dayOfMonth + \"/\" + (month + 1) + \"/\" + year;\n                    dateTextView.setText(selectedDate);\n                },\n                calendar.get(Calendar.YEAR),\n                calendar.get(Calendar.MONTH),\n                calendar.get(Calendar.DAY_OF_MONTH));\n            datePickerDialog.show();\n        });\n\n        // Time Picker\n        timeTextView.setOnClickListener(v -> {\n            TimePickerDialog timePickerDialog = new TimePickerDialog(this,\n                (view, hourOfDay, minute) -> {\n                    String selectedTime = hourOfDay + \":\" + minute;\n                    timeTextView.setText(selectedTime);\n                },\n                calendar.get(Calendar.HOUR_OF_DAY),\n                calendar.get(Calendar.MINUTE),\n                true); // true for 24-hour format\n            timePickerDialog.show();\n        });\n    }\n}"
      },
      {
        "question": "6. Write a short note on datatypes of Dart.",
        "answer": "Dart is a statically-typed programming language, meaning every variable has a datatype. It provides various built-in datatypes to handle different kinds of data efficiently.\n\n**Key Datatypes in Dart:**\n\n1. **Numbers:**\n   - `int`: For integers (e.g., 1, 42).\n   - `double`: For floating-point numbers (e.g., 3.14, -0.5).\n\n2. **String:** Represents a sequence of characters (e.g., \"Hello, Dart!\").\n\n3. **Boolean:** Represents true or false values (e.g., `true`, `false`).\n\n4. **Lists:** Ordered collections of items, also known as arrays (e.g., `[1, 2, 3]`).\n\n5. **Maps:** Key-value pairs (e.g., `{ 'key1': 'value1', 'key2': 'value2' }`).\n\n6. **Set:** An unordered collection of unique items (e.g., `{1, 2, 3}`).\n\n7. **Dynamic:** Allows variables to hold any datatype and is resolved at runtime.\n\nDart's versatile and powerful datatypes make it suitable for developing web, mobile, and server applications efficiently.",
        "code": "void main() {\n    // Example of different datatypes in Dart\n    int age = 25;\n    double height = 5.9;\n    String name = \"Ankit\";\n    bool isStudent = true;\n    List<int> scores = [90, 85, 88];\n    Map<String, String> student = {'name': 'Ankit', 'grade': 'A'};\n    Set<int> uniqueNumbers = {1, 2, 3};\n\n    print('Name: name, Age: age, Height: height, Is Student: isStudent');\n    print('Scores: scores');\n    print('Student Info: student');\n    print('Unique Numbers: uniqueNumbers');\n}"
      },
      {
        "question": "7. Explain decision-making statements in Dart.",
        "answer": "Decision-making statements in Dart allow developers to execute specific code blocks based on conditions. These statements help in controlling the program flow and handling different scenarios dynamically.\n\n**Key Decision-Making Statements in Dart:**\n\n1. **if Statement:**\n   Executes a code block if the condition evaluates to true.\n\n2. **if-else Statement:**\n   Executes one block of code if the condition is true, and another if it is false.\n\n3. **if-else if Ladder:**\n   Checks multiple conditions sequentially and executes the block corresponding to the first true condition.\n\n4. **Switch Statement:**\n   Used for multi-way branching based on an expression's value. It matches cases and executes the corresponding block.",
        "code": "void main() {\n    int number = 5;\n\n    // if Statement\n    if (number > 0) {\n        print('Positive Number');\n    }\n\n    // if-else Statement\n    if (number % 2 == 0) {\n        print('Even Number');\n    } else {\n        print('Odd Number');\n    }\n\n    // if-else if Ladder\n    if (number > 0) {\n        print('Positive');\n    } else if (number < 0) {\n        print('Negative');\n    } else {\n        print('Zero');\n    }\n\n    // switch Statement\n    switch (number) {\n        case 1:\n            print('Number is one');\n            break;\n        case 5:\n            print('Number is five');\n            break;\n        default:\n            print('Number is neither one nor five');\n    }\n}"
      },
      {
        "question": "8. Explain features of Flutter.",
        "answer": "Flutter is a popular open-source framework developed by Google for building natively compiled applications for mobile, web, and desktop from a single codebase. It has several powerful features that make it appealing to developers.\n\n**Key Features of Flutter:**\n\n1. **Hot Reload:** Allows developers to see the instant results of code changes without restarting the app, making development faster and more efficient.\n\n2. **Single Codebase:** Enables the creation of apps for iOS, Android, Web, and Desktop using one codebase, reducing effort and time.\n\n3. **Widgets:** Provides a rich set of customizable widgets for designing beautiful and interactive user interfaces.\n\n4. **High Performance:** Offers a fast and smooth user experience by using Dart's ahead-of-time (AOT) compilation and Flutter's rendering engine.\n\n5. **Cross-Platform:** Supports building apps for multiple platforms, maintaining a consistent look and feel.\n\n6. **Expressive UI:** Enables the development of visually attractive UIs with advanced animation and graphics capabilities.\n\n7. **Open-Source:** Free to use and supported by an active community of developers.\n\n8. **Native Performance:** Integrates with platform-specific APIs and code for native-like performance.\n\nFlutter's features simplify the app development process while ensuring flexibility, performance, and scalability.",
        "code": "void main() {\n  runApp(MaterialApp(\n    home: Scaffold(\n      appBar: AppBar(title: Text('Flutter Features')),\n      body: Center(child: Text('Powerful and Beautiful Apps with Flutter!')),\n    ),\n  ));\n}"
      },
      {
        "question": "9. Explain visible and invisible widgets in Flutter.",
        "answer": "**Visible Widgets in Flutter:**\nVisible widgets are those that directly appear on the screen and form the UI of the application. These widgets interact with users and display content such as text, images, buttons, etc.\n\n**Examples of Visible Widgets:**\n1. **Text:** Used to display textual content.\n2. **Image:** Displays images in the app.\n3. **RaisedButton/OutlinedButton:** Buttons that trigger actions on user interaction.\n4. **AppBar:** Displays the top navigation bar.\n\n**Invisible Widgets in Flutter:**\nInvisible widgets are those that do not appear on the screen directly but help manage or manipulate the layout and state of visible widgets. These widgets structure the UI or provide configurations for other widgets.\n\n**Examples of Invisible Widgets:**\n1. **Column/Row:** Arranges child widgets vertically or horizontally.\n2. **Padding:** Adds spacing around a child widget.\n3. **Expanded/Flexible:** Adjusts the size of child widgets within a Row or Column.\n4. **Navigator:** Manages navigation and routing between screens.\n\nBoth types of widgets work together to create powerful and dynamic user interfaces in Flutter.",
        "code": "import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('Visible and Invisible Widgets'),\n        ),\n        body: Column(\n          children: [\n            // Visible Widget\n            Text('This is a visible widget'),\n\n            // Invisible Widget used for layout\n            Padding(\n              padding: EdgeInsets.all(10.0),\n              child: Text('This text has padding around it'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}"
      },
      {
        "question": "10. Write a short note on Flutter Form.",
        "answer": "In Flutter, the Form widget is used to create and manage user input fields collectively, such as text fields or checkboxes. It enables validation and error-handling mechanisms to ensure proper user input.\n\n**Features of Flutter Form:**\n1. Groups multiple input fields together.\n2. Provides a FormState for validation and saving operations.\n3. Supports form validation with methods like `validate()` and `save()`.\n4. Works seamlessly with widgets like `TextFormField` for input handling.\n\nUsing the Form widget simplifies managing and validating user input in Flutter applications, especially for complex forms.",
        "code": "import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('Flutter Form Example'),\n        ),\n        body: MyForm(),\n      ),\n    );\n  }\n}\n\nclass MyForm extends StatelessWidget {\n  final _formKey = GlobalKey<FormState>();\n\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n      padding: const EdgeInsets.all(16.0),\n      child: Form(\n        key: _formKey,\n        child: Column(\n          children: [\n            TextFormField(\n              decoration: InputDecoration(labelText: 'Name'),\n              validator: (value) {\n                if (value == null || value.isEmpty) {\n                  return 'Please enter your name';\n                }\n                return null;\n              },\n            ),\n            ElevatedButton(\n              onPressed: () {\n                if (_formKey.currentState!.validate()) {\n                  ScaffoldMessenger.of(context).showSnackBar(\n                    SnackBar(content: Text('Form is valid!')),\n                  );\n                }\n              },\n              child: Text('Submit'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}"
      },
      {
        "question": "11. Discuss architecture of Flutter in detail.",
        "answer": "Flutter is a powerful framework for building cross-platform applications. Its architecture is layered, allowing seamless development, rendering, and platform integration. Below are the key layers in Flutter's architecture:\n\n1. **Framework Layer:**\n   - This is the highest level and is written in Dart.\n   - It provides essential components, including Widgets, Rendering, and Animation.\n   - Widgets: Compose the UI of an app, with a widget tree.\n\n2. **Engine Layer:**\n   - Built in C++ and provides low-level rendering support.\n   - Houses the Skia graphics library for rendering.\n   - Handles text layout, OpenGL or Vulkan rendering, and accessibility.\n\n3. **Embedder Layer:**\n   - This is platform-specific and bridges Flutter with the native platform (iOS, Android, or desktop).\n   - Responsible for input/output interaction, window size changes, etc.\n\n4. **Dart Platform:**\n   - Flutter leverages Dart's JIT (Just-In-Time) during development for hot reload and AOT (Ahead-Of-Time) for fast and native performance in release builds.\n\nFlutter’s architecture ensures fast development cycles, expressive UIs, and high performance, making it ideal for modern app development.",
        "code": "// Flutter code example to showcase widget tree structure\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: Text('Flutter Architecture')),\n        body: Center(child: Text('Understand layered architecture!')),\n      ),\n    );\n  }\n}"
      },
      {
        "question": "12. Explain any three features of Flutter in detail.",
        "answer": "Flutter, developed by Google, is a versatile framework for building cross-platform applications. Here are three key features explained in detail:\n\n1. **Hot Reload:**\n   - Hot Reload allows developers to see the immediate results of code changes without restarting the application.\n   - It improves productivity during development by enabling fast iterations on UI and functionality.\n   - For instance, when a developer changes the color of a button or adjusts an animation, the Hot Reload instantly reflects these changes.\n\n2. **Widget-Based Architecture:**\n   - Everything in Flutter is a widget, including text, images, layouts, and even the app itself.\n   - These widgets are highly customizable and composable, enabling developers to build beautiful and expressive UIs.\n   - Flutter provides pre-built widgets (like `Text`, `Image`, `Container`) and the flexibility to create custom widgets.\n\n3. **Cross-Platform Development:**\n   - With a single codebase, Flutter enables the creation of apps for multiple platforms, including iOS, Android, Web, and Desktop.\n   - This reduces development time and effort while maintaining a consistent look and feel across devices.\n   - Flutter achieves near-native performance by compiling Dart code to native machine code.\n\nThese features make Flutter a powerful and efficient tool for modern app development, catering to the needs of both developers and end-users.",
        "code": "void main() {\n  runApp(MaterialApp(\n    home: Scaffold(\n      appBar: AppBar(title: Text('Flutter Features')),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Text('Hot Reload: Fast iterations!'),\n            Text('Widgets: Building expressive UIs.'),\n            Text('Cross-Platform: One codebase for all.')\n          ],\n        ),\n      ),\n    ),\n  ));\n}"
      }
      
      
      
      
      
      
    ]
  },
  "net": {
    "mcq": [
      {
        "question": "1. What is CTS?",
        "options": ["a) Common Language Specification", "b) Code Translation System"],
        "correctAnswer": "a",
        "id": "net-q1"
      }
    ],
    "onemarks": [
      {
        "question": "1. What is boxing in VB.NET?",
        "answer": "Boxing is the process of converting a value type (e.g., Integer, Double) into a reference type (Object) in VB.NET. This allows value types to be treated as objects, enabling them to be used in scenarios requiring reference types.",
        "code": "Dim value As Integer = 42\n Dim boxedValue As Object = value ' Boxing occurs here,:\n Dim unboxedValue As Integer = CType(boxedValue, Integer) ' Unboxing occurs here"
      },
      {
        "question": "2. What is unmanaged code?",
        "answer": "Unmanaged code refers to code that is executed directly by the operating system, outside the control of the .NET Framework's runtime (CLR). It is typically written in languages like C or C++ and relies on manual memory management and platform-specific APIs. Unlike managed code, it does not benefit from automatic memory management, garbage collection, or type safety provided by the CLR.",
        "code": "#include <iostream>\n using namespace std;\n int main() {\n     cout << \"Hello, unmanaged world!\" << endl;\n     return 0;\n }"
      },
      {
        "question": "3. What is the use of the Filter property of the OpenFileDialog control?",
        "answer": "The Filter property of the OpenFileDialog control specifies the file types that the dialog box will display. It allows developers to limit the file selection by setting a specific filter string. This enhances usability by showing only relevant files to the user.",
        "code": "Dim openFileDialog As New OpenFileDialog\nopenFileDialog.Filter = \"Text Files (*.txt)|*.txt|All Files (*.*)|*.*\"\nIf openFileDialog.ShowDialog() = DialogResult.OK Then\n    MessageBox.Show(\"Selected File: \" & openFileDialog.FileName)\nEnd If"
      },
      {
        "question": "4. What is the difference between an Array and a Collection in VB.NET?",
        "answer": "An Array and a Collection are used to store groups of items in VB.NET, but they differ in terms of features and usage:",
        "code": "'Array example:\n'Fixed size and single data type\nDim arr(4) As Integer\narr(0) = 10\narr(1) = 20\n\n'Collection example:\n'Dynamic size and can store multiple data types\nDim list As New ArrayList()\nlist.Add(10) 'Adding integer\nlist.Add(\"Hello\") 'Adding string"
      },
      {
        "question": "5. How to resize an Array in VB.NET?",
        "answer": "To resize an array in VB.NET, you can use the ReDim statement. This statement can change the size of an array dynamically at runtime. If you want to preserve the existing elements while resizing, you can use ReDim Preserve.",
        "code": "'Example without preserving elements:\nDim arr() As Integer = {1, 2, 3}\nReDim arr(5) ' Resize the array to hold 6 elements\n\n'Example with preserving elements:\nDim arr() As Integer = {1, 2, 3}\nReDim Preserve arr(5) ' Resize the array and keep the existing values"
      },
      {
        "question": "6. Explain Add and Insert methods of ListBox in VB.NET.",
        "answer": "The Add and Insert methods of the ListBox control in VB.NET are used to add items to the ListBox. While both methods add items, they differ in functionality and use cases:",
        "code": "'Add method:\n'Adds an item to the end of the ListBox.\nDim listBox1 As New ListBox()\nlistBox1.Items.Add(\"Item1\") ' Adds 'Item1' to the end of the ListBox.\n\n'Insert method:\n'Inserts an item at a specific index in the ListBox.\nlistBox1.Items.Insert(0, \"NewItem\") ' Inserts 'NewItem' at the 0th index."
      },
      {
        "question": "7. List various dialog controls in VB.NET.",
        "answer": "VB.NET provides several dialog controls that allow interaction with users for specific tasks, such as file selection, color picking, and printing. These include:",
        "code": "'1. OpenFileDialog:\nDim openFileDialog As New OpenFileDialog\nopenFileDialog.Filter = \"Text Files (*.txt)|*.txt|All Files (*.*)|*.*\"\nIf openFileDialog.ShowDialog() = DialogResult.OK Then\n    MessageBox.Show(\"Selected File: \" & openFileDialog.FileName)\nEnd If\n\n'2. SaveFileDialog:\nDim saveFileDialog As New SaveFileDialog\nsaveFileDialog.Filter = \"Text Files (*.txt)|*.txt\"\nIf saveFileDialog.ShowDialog() = DialogResult.OK Then\n    MessageBox.Show(\"File saved as: \" & saveFileDialog.FileName)\nEnd If\n\n'3. FolderBrowserDialog:\nDim folderBrowserDialog As New FolderBrowserDialog\nIf folderBrowserDialog.ShowDialog() = DialogResult.OK Then\n    MessageBox.Show(\"Selected Folder: \" & folderBrowserDialog.SelectedPath)\nEnd If\n\n'4. ColorDialog:\nDim colorDialog As New ColorDialog\nIf colorDialog.ShowDialog() = DialogResult.OK Then\n    MessageBox.Show(\"Selected Color: \" & colorDialog.Color.ToString())\nEnd If\n\n'5. FontDialog:\nDim fontDialog As New FontDialog\nIf fontDialog.ShowDialog() = DialogResult.OK Then\n    MessageBox.Show(\"Selected Font: \" & fontDialog.Font.Name)\nEnd If\n\n'6. PrintDialog:\nDim printDialog As New PrintDialog\nIf printDialog.ShowDialog() = DialogResult.OK Then\n    MessageBox.Show(\"Print job initiated.\")\nEnd If"
      },
      {
        "question": "8. What is the use of Option Explicit in VB.NET?",
        "answer": "Option Explicit is a directive in VB.NET that forces the programmer to declare all variables explicitly before using them. When enabled, it prevents the use of undeclared variables, reducing errors caused by typos or unintended variable creation. This makes the code easier to debug and maintain.",
        "code": "'Enable Option Explicit:\nOption Explicit On\n\n'Example:\nDim num As Integer ' Explicitly declared\nnum = 10 ' Assigning a value to the declared variable\n\nDim result As Integer = num * 2 ' Valid operation because variables are declared\n\n'Error Example with Option Explicit On:\nx = 5 ' This would cause a compilation error since x is not declared"
      },
      {
        "question": "9. What is the use of the MustInherit keyword in VB.NET?",
        "answer": "The MustInherit keyword in VB.NET is used to define an abstract class. An abstract class serves as a base class and cannot be instantiated directly. It is designed to provide a blueprint for derived classes, which must implement all the abstract members defined in the base class. This ensures a consistent implementation across all derived classes.",
        "code": "'Example:\nMustInherit Class Shape\n    Public MustOverride Function GetArea() As Double ' Abstract method\nEnd Class\n\nClass Circle\n    Inherits Shape\n    Private radius As Double\n\n    Public Sub New(r As Double)\n        radius = r\n    End Sub\n\n    Public Overrides Function GetArea() As Double\n        Return Math.PI * radius * radius ' Implements abstract method\n    End Function\nEnd Class\n\n'Usage:\nDim myCircle As New Circle(5)\nMessageBox.Show(\"Area: \" & myCircle.GetArea())"
      },
      {
        "question": "10. Explain CType() function in VB.NET.",
        "answer": "The CType() function in VB.NET is used to explicitly convert an expression from one data type to another. It supports all types of conversions, including value types to reference types and vice versa. If the conversion is invalid, it throws an InvalidCastException.",
        "code": "'Example of CType():\nDim number As Integer = 42\nDim strNumber As String\nstrNumber = CType(number, String) ' Converts Integer to String\n\n'Example of invalid conversion:\nDim obj As Object = \"Hello\"\nDim num As Integer\nnum = CType(obj, Integer) ' Throws an exception since the conversion is invalid"
      }
      
    ],
    "long": [
      {
        "question": "1. Explain keyboard events in detail.",
        "answer": "Keyboard events in VB.NET are triggered when the user interacts with the keyboard. These events are primarily used to capture and handle key presses in applications for performing specific actions. The most common keyboard events are:\n\n1. **KeyDown**: This event occurs when a key is first pressed. It is commonly used to detect when a key is being held down.\n\n2. **KeyPress**: This event occurs after the KeyDown event and before the KeyUp event. It is triggered for character keys and can be used to filter or validate user input (e.g., allowing only numeric input).\n\n3. **KeyUp**: This event occurs when a key is released. It is useful for triggering actions after the user has finished pressing a key.\n\nEach of these events provides event arguments (`KeyEventArgs` or `KeyPressEventArgs`) that include properties like:\n\n- `KeyCode`: Represents the specific key pressed (e.g., A, B, Enter).\n- `KeyChar`: Represents the character corresponding to the key (used in KeyPress).\n- `Handled`: Can be set to True to prevent the event from being passed to the operating system.",
        "code": "'Example demonstrating keyboard events in VB.NET:\n\nPrivate Sub Form1_KeyDown(sender As Object, e As KeyEventArgs) Handles Me.KeyDown\n    If e.KeyCode = Keys.Enter Then\n        MessageBox.Show(\"Enter key pressed.\")\n    End If\nEnd Sub\n\nPrivate Sub Form1_KeyPress(sender As Object, e As KeyPressEventArgs) Handles Me.KeyPress\n    ' Allow only numeric input\n    If Not Char.IsDigit(e.KeyChar) AndAlso Not Char.IsControl(e.KeyChar) Then\n        e.Handled = True\n        MessageBox.Show(\"Only numeric input is allowed.\")\n    End If\nEnd Sub\n\nPrivate Sub Form1_KeyUp(sender As Object, e As KeyEventArgs) Handles Me.KeyUp\n    MessageBox.Show(\"Key released: \" & e.KeyCode.ToString())\nEnd Sub"
      },
      {
        "question": "2. Explain .NET Framework in detail.",
        "answer": ".NET Framework is a software development platform developed by Microsoft. It provides a comprehensive and consistent programming model for building various types of applications, such as web, desktop, mobile, and cloud-based applications. It includes a large class library called the Framework Class Library (FCL) and provides runtime environments for executing code, such as the Common Language Runtime (CLR). Key components include:\n\n1. **Common Language Runtime (CLR):** The CLR is the execution engine that handles running applications. It provides services like memory management, exception handling, garbage collection, and security.\n\n2. **Framework Class Library (FCL):** The FCL is a vast collection of reusable classes, interfaces, and value types that provide functionalities such as file manipulation, database interaction, XML parsing, and more.\n\n3. **Languages:** .NET supports multiple languages like C#, VB.NET, F#, etc. The Common Type System (CTS) and Common Language Specification (CLS) ensure compatibility and interoperability among these languages.\n\n4. **ASP.NET:** A part of the .NET Framework used for building dynamic web applications and services.\n\n5. **ADO.NET:** A data access technology within .NET for connecting to databases and performing CRUD operations.\n\n6. **Windows Forms and WPF:** Used to build rich Windows desktop applications.\n\n7. **Web Services and WCF:** Allow integration and communication between applications over the internet or other networks.",
        "code": "'Example of CLR Functionality:\n'Simple garbage collection demonstration:\nImports System\n\nModule Program\n    Sub Main()\n        Dim obj As Object = New Object()\n        Console.WriteLine(\"Object created.\")\n        obj = Nothing\n        GC.Collect()\n        Console.WriteLine(\"Garbage collection triggered.\")\n    End Sub\nEnd Module"
      },
      {
        "question": "3. Write a detailed note on looping, switch, and if statement in VB.NET.",
        "answer": "In VB.NET, looping, switch, and if statements are essential control structures used to manage the program's flow. They enable decision-making, conditional branching, and repetitive task handling, which are crucial for building logical programs.",
        "code": "'1. Looping:\n'Looping is used to execute a block of code repeatedly until a certain condition is met. Types of loops in VB.NET include:\n\n'For Loop:\nFor i As Integer = 1 To 5\n    Console.WriteLine(\"Iteration: \" & i)\nNext\n\n'While Loop:\nDim count As Integer = 0\nWhile count < 3\n    Console.WriteLine(\"Count: \" & count)\n    count += 1\nEnd While\n\n'Do While Loop (Condition checked at the beginning):\nDim num As Integer = 0\nDo While num < 3\n    Console.WriteLine(\"Number: \" & num)\n    num += 1\nLoop\n\n'Do Until Loop (Condition checked at the beginning):\nDim val As Integer = 0\nDo Until val > 3\n    Console.WriteLine(\"Value: \" & val)\n    val += 1\nLoop\n\n'2. Switch (Select Case):\n'The Select Case statement is an alternative to If...Else for multiple conditional checks. It simplifies code readability and efficiency.\nDim day As Integer = 3\nSelect Case day\n    Case 1\n        Console.WriteLine(\"Monday\")\n    Case 2\n        Console.WriteLine(\"Tuesday\")\n    Case 3\n        Console.WriteLine(\"Wednesday\")\n    Case Else\n        Console.WriteLine(\"Other Day\")\nEnd Select\n\n'3. If Statement:\n'If statements are used for conditional execution of code blocks. Variants include If...Then, If...Then...Else, and nested If statements.\nDim score As Integer = 85\nIf score >= 90 Then\n    Console.WriteLine(\"Grade: A\")\nElseIf score >= 80 Then\n    Console.WriteLine(\"Grade: B\")\nElse\n    Console.WriteLine(\"Grade: C\")\nEnd If\n\n'Nested If Statement Example:\nDim age As Integer = 20\nDim isMember As Boolean = True\nIf age > 18 Then\n    If isMember Then\n        Console.WriteLine(\"Eligible for Member Benefits\")\n    Else\n        Console.WriteLine(\"Eligible, but no Member Benefits\")\n    End If\nEnd If\n\n'These constructs provide powerful mechanisms for controlling the flow of execution, making programs more efficient and organized.'"
      },
      {
        "question": "4. Write about Common Language Runtime (CLR) in detail.",
        "answer": "The Common Language Runtime (CLR) is an integral component of the .NET Framework that acts as the execution engine for .NET applications. It manages code execution and provides numerous services to enhance development efficiency and application performance.\n\nKey Features of CLR:\n1. **Managed Code Execution**: CLR runs managed code written in supported .NET languages. It ensures safe execution by monitoring and controlling access to memory.\n2. **Garbage Collection (GC)**: Automatic memory management by releasing unused objects and preventing memory leaks.\n3. **Just-In-Time (JIT) Compilation**: Converts Intermediate Language (IL) code into native machine code at runtime for optimized performance.\n4. **Cross-Language Interoperability**: Through Common Type System (CTS) and Common Language Specification (CLS), CLR enables seamless interoperability between different .NET-supported languages.\n5. **Exception Handling**: Provides a structured mechanism for managing runtime errors to ensure application stability.\n6. **Security**: CLR enforces Code Access Security (CAS) and verifies IL code for safe execution.",
        "code": "'Example of CLR Functionality in VB.NET:\nImports System\n\nModule Program\n    Sub Main()\n        Dim num1 As Integer = 10\n        Dim num2 As Integer = 20\n        Console.WriteLine(\"The sum is: \" & (num1 + num2))\n    End Sub\nEnd Module"
      },
      {
        "question": "5. Explain Menu control and Context Menu control in VB.NET in detail.",
        "answer": "Menu controls and Context Menu controls are essential in VB.NET for providing user-friendly navigation and interaction. They allow users to execute commands or navigate through an application conveniently.",
        "code": "'Menu Control:\n'The Menu control is used to create a traditional menu bar in a VB.NET application. It allows the developer to organize commands in a structured hierarchy.\n\n'Example of Menu Control:\nDim menuStrip As New MenuStrip()\nDim fileMenu As New ToolStripMenuItem(\"File\")\nDim openMenuItem As New ToolStripMenuItem(\"Open\")\nDim exitMenuItem As New ToolStripMenuItem(\"Exit\")\n\n'Adding items to the menu:\nfileMenu.DropDownItems.Add(openMenuItem)\nfileMenu.DropDownItems.Add(exitMenuItem)\nmenuStrip.Items.Add(fileMenu)\nControls.Add(menuStrip)\n\n'Key Features:\n'1. It supports hierarchical menu structures (e.g., File > Open, Save).\n'2. Menu items can trigger specific actions using event handlers, such as:\nAddHandler exitMenuItem.Click, AddressOf ExitApplication\n\n'Private Sub ExitApplication(sender As Object, e As EventArgs)\n    Application.Exit()\nEnd Sub\n\n'Context Menu Control:\n'The Context Menu control (ContextMenuStrip) provides a shortcut menu that appears when a user right-clicks on an item or area of the application.\n\n'Example of Context Menu Control:\nDim contextMenu As New ContextMenuStrip()\nDim copyMenuItem As New ToolStripMenuItem(\"Copy\")\nDim pasteMenuItem As New ToolStripMenuItem(\"Paste\")\n\n'Adding items to the Context Menu:\ncontextMenu.Items.Add(copyMenuItem)\ncontextMenu.Items.Add(pasteMenuItem)\n\n'Associating the Context Menu with a control:\nDim textBox As New TextBox()\ntextBox.ContextMenuStrip = contextMenu\nControls.Add(textBox)\n\n'Key Features:\n'1. Context menus are associated with specific controls.\n'2. They appear on right-click, providing options relevant to the control (e.g., Copy, Paste for a TextBox).\n'3. Each menu item can trigger event handlers for corresponding actions, like:\nAddHandler copyMenuItem.Click, AddressOf CopyText\n\n'Private Sub CopyText(sender As Object, e As EventArgs)\n    MessageBox.Show(\"Copy action triggered.\")\nEnd Sub"
      },
      {
        "question": "6. Explain OpenFileDialog and ColorDialog in detail.",
        "answer": "In VB.NET, OpenFileDialog and ColorDialog are built-in dialog controls that provide user-friendly interfaces for selecting files and colors, respectively. They simplify interactions and ensure a standardized user experience.\n\n1. **OpenFileDialog**:\nThe OpenFileDialog control is used to allow users to browse and select files from their system. It provides several properties and events to customize and handle file selection effectively.\n- Key Properties:\n  - `Filter`: Sets the file types that the dialog will display (e.g., \"Text Files (*.txt)|*.txt|All Files (*.*)|*.*\").\n  - `FileName`: Gets the full path of the selected file.\n  - `InitialDirectory`: Sets the initial directory displayed when the dialog opens.\n  - `Multiselect`: Allows the selection of multiple files if set to True.\n  - `Title`: Sets the title of the dialog box.\n\n2. **ColorDialog**:\nThe ColorDialog control is used to present a color palette to the user, allowing them to choose colors for customizing the interface or graphics.\n- Key Properties:\n  - `Color`: Gets or sets the selected color.\n  - `FullOpen`: If set to True, the dialog opens with the full color palette expanded.\n  - `CustomColors`: Sets or retrieves an array of custom colors that the user has defined.\n\nThese dialog controls are simple to implement and ensure consistency in application design.",
        "code": "'Example of OpenFileDialog:\nDim openFileDialog As New OpenFileDialog()\nopenFileDialog.Filter = \"Text Files (*.txt)|*.txt|All Files (*.*)|*.*\"\nopenFileDialog.InitialDirectory = \"C:\\\\\"\nIf openFileDialog.ShowDialog() = DialogResult.OK Then\n    MessageBox.Show(\"Selected File: \" & openFileDialog.FileName)\nEnd If\n\n'Example of ColorDialog:\nDim colorDialog As New ColorDialog()\ncolorDialog.FullOpen = True\nIf colorDialog.ShowDialog() = DialogResult.OK Then\n    MessageBox.Show(\"Selected Color: \" & colorDialog.Color.ToString())\nEnd If"
      },
      {
        "question": "7. Explain Date-related functions in .NET.",
        "answer": ".NET provides extensive support for working with dates and times through the `DateTime` structure and its associated methods in the System namespace. These functions allow developers to perform operations such as calculating time differences, formatting dates, parsing strings into date formats, and much more.\n\nKey Date-related functions:\n\n1. **Creating DateTime objects**:\n   - `DateTime.Now`: Gets the current date and time.\n   - `DateTime.Today`: Gets the current date with time set to 00:00:00.\n   - `DateTime.UtcNow`: Gets the current date and time in Coordinated Universal Time (UTC).\n\n2. **Manipulating Dates**:\n   - `AddDays()`: Adds a specified number of days to the date.\n   - `AddMonths()`: Adds a specified number of months to the date.\n   - `AddYears()`: Adds a specified number of years to the date.\n   - `AddHours()`, `AddMinutes()`, `AddSeconds()`: Adds corresponding time values.\n\n3. **Formatting Dates**:\n   - `ToString()`: Converts a date to its string representation using a specified format.\n   - Example formats:\n     - `\"yyyy-MM-dd\"` (e.g., \"2025-03-18\").\n     - `\"dddd, MMMM dd, yyyy\"` (e.g., \"Tuesday, March 18, 2025\").\n\n4. **Parsing Dates**:\n   - `DateTime.Parse()`: Converts a string to a DateTime object if it matches a recognizable format.\n   - `DateTime.TryParse()`: Attempts to convert a string to a DateTime object and returns a boolean indicating success.\n\n5. **Calculating Differences**:\n   - `Subtract()`: Returns a `TimeSpan` object representing the difference between two dates.\n   - Example: `Dim difference As TimeSpan = date1.Subtract(date2)`\n\n6. **Comparing Dates**:\n   - Methods like `Compare()`, `Equals()`, and operators (`<`, `>`, `<=`, `>=`) are used to compare DateTime objects.\n\n7. **Other Useful Properties and Methods**:\n   - `Day`, `Month`, `Year`: Extract specific parts of the date.\n   - `DayOfWeek`: Gets the day of the week (e.g., Monday, Tuesday).\n   - `DayOfYear`: Gets the day of the year (1 to 365/366).",
        "code": "'Example Demonstrating Date-Related Functions:\nImports System\n\nModule Program\n    Sub Main()\n        ' Create DateTime objects\n        Dim currentDateTime As DateTime = DateTime.Now\n        Dim specificDate As New DateTime(2023, 12, 25)\n\n        ' Manipulate Dates\n        Console.WriteLine(\"Tomorrow: \" & currentDateTime.AddDays(1).ToString(\"yyyy-MM-dd\"))\n        Console.WriteLine(\"Next Year: \" & currentDateTime.AddYears(1).ToString(\"dddd, MMMM dd, yyyy\"))\n\n        ' Format Date\n        Console.WriteLine(\"Formatted Date: \" & specificDate.ToString(\"dddd, MMMM dd, yyyy\"))\n\n        ' Parse String to DateTime\n        Dim parsedDate As DateTime\n        If DateTime.TryParse(\"2025-03-18\", parsedDate) Then\n            Console.WriteLine(\"Parsed Date: \" & parsedDate.ToString())\n        Else\n            Console.WriteLine(\"Invalid date format.\")\n        End If\n\n        ' Calculate Difference Between Dates\n        Dim date1 As New DateTime(2025, 3, 18)\n        Dim date2 As New DateTime(2023, 3, 18)\n        Dim difference As TimeSpan = date1.Subtract(date2)\n        Console.WriteLine(\"Days Between: \" & difference.TotalDays & \" days\")\n\n        ' Display Parts of the Date\n        Console.WriteLine(\"Day of the Week: \" & currentDateTime.DayOfWeek.ToString())\n        Console.WriteLine(\"Day of the Year: \" & currentDateTime.DayOfYear)\n    End Sub\nEnd Module"
      },
      {
        "question": "8. What is a Constructor and Destructor? Explain Constructor using an example.",
        "answer": "A Constructor and Destructor are special methods in a class used for initializing and cleaning up resources in an object.\n\n1. **Constructor**: \n   - It is a special method that is automatically called when an object of the class is created.\n   - It is used to initialize the object and assign default values to its fields.\n   - The constructor has the same name as the class and does not have a return type.\n   - Types of Constructors:\n     - Default Constructor: Automatically provided if no constructor is explicitly defined.\n     - Parameterized Constructor: Accepts parameters to initialize the object with specific values.\n     - Shared Constructor (Static): Initializes shared or static members of a class.\n\n2. **Destructor**:\n   - It is a method that is automatically invoked when an object is destroyed.\n   - Destructors are used to release resources like closing file streams or database connections.\n   - In VB.NET, destructors are implemented using the `Finalize` method.",
        "code": "'Example of Constructor in VB.NET:\nClass Person\n    Private Name As String\n    Private Age As Integer\n\n    'Constructor\n    Public Sub New(ByVal personName As String, ByVal personAge As Integer)\n        Name = personName\n        Age = personAge\n    End Sub\n\n    'Method to Display Person Details\n    Public Sub Display()\n        Console.WriteLine(\"Name: \" & Name & \", Age: \" & Age)\n    End Sub\nEnd Class\n\n'Usage:\nModule Module1\n    Sub Main()\n        'Creating an object and initializing using Constructor\n        Dim person1 As New Person(\"Ankit\", 25)\n        person1.Display()\n    End Sub\nEnd Module"
      },
      {
        "question": "9. Write a note on Object-Oriented Concepts in VB.NET.",
        "answer": "Object-Oriented Programming (OOP) is a programming paradigm based on the concept of 'objects,' which can contain data in the form of fields (attributes or properties) and methods (functions). VB.NET is a fully object-oriented language, and its core principles enable developers to design robust, reusable, and maintainable applications by focusing on real-world entities. The main OOP concepts in VB.NET are:\n\n1. **Encapsulation**:\n   - Encapsulation is the process of wrapping data (fields) and code (methods) into a single unit, called a class.\n   - Access modifiers like `Public`, `Private`, `Protected` control the visibility of members within and outside the class.\n   - Encapsulation ensures data security and abstraction.\n\n2. **Inheritance**:\n   - Inheritance allows one class (child class) to inherit properties and methods of another class (parent class), promoting code reuse.\n   - VB.NET uses the `Inherits` keyword to achieve inheritance.\n   - Example: A `Car` class can inherit from a generic `Vehicle` class.\n\n3. **Polymorphism**:\n   - Polymorphism enables objects to take many forms and allows methods to perform differently based on the context.\n   - Achieved through method overriding (runtime polymorphism) and method overloading (compile-time polymorphism).\n\n4. **Abstraction**:\n   - Abstraction hides implementation details and shows only the essential features of an object.\n   - Achieved through abstract classes (using `MustInherit`) and interfaces (using `Interface` keyword).\n\n5. **Classes and Objects**:\n   - A class is a blueprint for creating objects. It defines properties and methods.\n   - An object is an instance of a class, representing a real-world entity. Objects interact through methods and properties.\n\n6. **Interfaces**:\n   - Interfaces define a contract that implementing classes must follow.\n   - Unlike inheritance, interfaces allow multiple classes to implement the same set of methods, promoting consistency and flexibility.",
        "code": "'Example of Object-Oriented Concepts in VB.NET:\nClass Vehicle\n    Public Property Brand As String\n    Public Property Speed As Integer\n\n    Public Overridable Sub DisplayDetails()\n        Console.WriteLine($\"Brand: {Brand}, Speed: {Speed}\")\n    End Sub\nEnd Class\n\nClass Car\n    Inherits Vehicle\n\n    Public Property NumberOfDoors As Integer\n\n    Public Overrides Sub DisplayDetails()\n        MyBase.DisplayDetails()\n        Console.WriteLine($\"Number of Doors: {NumberOfDoors}\")\n    End Sub\nEnd Class\n\nModule Program\n    Sub Main()\n        Dim myCar As New Car() With {.Brand = \"Toyota\", .Speed = 120, .NumberOfDoors = 4}\n        myCar.DisplayDetails()\n    End Sub\nEnd Module"
      },
      {
        "question": "10. What is an Exception? Explain different types of exceptions in detail.",
        "answer": "An exception is a runtime error or an unexpected event that disrupts the normal flow of a program. It can occur due to various reasons, such as invalid user input, loss of network connectivity, or file not found errors. Exception handling in VB.NET ensures that such runtime errors are gracefully managed, preventing application crashes and providing meaningful error messages. VB.NET uses the Try...Catch...Finally construct to handle exceptions effectively.\n\nTypes of Exceptions in VB.NET:\n\n1. **System.Exception**: The base class for all exceptions in VB.NET.\n\n2. **System.IO.IOException**: Occurs during Input/Output operations like file handling errors (e.g., file not found, read/write issues).\n\n3. **System.DivideByZeroException**: Raised when an attempt to divide a number by zero is made.\n\n4. **System.NullReferenceException**: Raised when trying to use an object reference that is not initialized.\n\n5. **System.IndexOutOfRangeException**: Raised when an attempt is made to access an element outside the bounds of an array or collection.\n\n6. **System.InvalidCastException**: Occurs when an invalid type casting is performed.\n\n7. **System.ArgumentException**: Raised when an invalid argument is passed to a method.\n\n8. **System.FormatException**: Raised when an invalid format is specified (e.g., parsing a string to a numeric value fails).",
        "code": "'Example of Exception Handling:\nImports System\n\nModule Program\n    Sub Main()\n        Try\n            Dim numerator As Integer = 10\n            Dim denominator As Integer = 0\n            Dim result As Integer = numerator / denominator ' This will throw DivideByZeroException\n        Catch ex As DivideByZeroException\n            Console.WriteLine(\"Error: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"General Error: \" & ex.Message)\n        Finally\n            Console.WriteLine(\"Execution completed.\")\n        End Try\n    End Sub\nEnd Module"
      },
      {
        "question": "11. Explain properties and methods of Array in VB.NET.",
        "answer": "Arrays in VB.NET are collections of elements of the same data type, stored in contiguous memory locations. The Array class offers various properties and methods to work with arrays effectively. Here's a breakdown:\n\n### Properties:\n1. **Length**: Returns the total number of elements in all dimensions of the array.\n2. **Rank**: Indicates the number of dimensions (or ranks) of the array.\n3. **IsFixedSize**: Specifies whether the array has a fixed size.\n4. **IsReadOnly**: Indicates if the array is read-only.\n5. **GetUpperBound(dimension)**: Retrieves the upper bound of a specified dimension in the array.\n\n### Methods:\n1. **Clear(array, index, length)**: Resets a range of elements in the array to their default values.\n2. **Copy(sourceArray, destinationArray, length)**: Copies elements from one array to another.\n3. **Sort(array)**: Sorts the array elements in ascending order.\n4. **Reverse(array)**: Reverses the sequence of elements in the array.\n5. **GetValue(index)**: Retrieves the value at the specified index in the array.\n6. **SetValue(value, index)**: Sets a value at the specified index in the array.\n7. **IndexOf(array, value)**: Finds the index of the first occurrence of a specific value in the array.\n8. **LastIndexOf(array, value)**: Finds the index of the last occurrence of a specific value in the array.\n\n### Benefits:\nUsing these properties and methods, arrays become a flexible tool for storing and manipulating data efficiently.",
        "code": "'Example demonstrating properties and methods of Array in VB.NET:\nDim numbers As Integer() = {5, 3, 8, 1, 2}\n\n'Using Properties:\nConsole.WriteLine(\"Length of Array: \" & numbers.Length) ' Total elements\nConsole.WriteLine(\"Rank of Array: \" & numbers.Rank) ' Number of dimensions\n\n'Using Methods:\n'Clear Elements:\nArray.Clear(numbers, 1, 2) ' Clears 2 elements starting from index 1\nConsole.WriteLine(\"After Clear: \" & String.Join(\", \", numbers))\n\n'Sort Array:\nArray.Sort(numbers)\nConsole.WriteLine(\"After Sort: \" & String.Join(\", \", numbers))\n\n'Reverse Array:\nArray.Reverse(numbers)\nConsole.WriteLine(\"After Reverse: \" & String.Join(\", \", numbers))\n\n'Finding Value:\nDim index As Integer = Array.IndexOf(numbers, 8)\nIf index <> -1 Then\n    Console.WriteLine(\"Found 8 at index: \" & index)\nElse\n    Console.WriteLine(\"8 not found.\")\nEnd If"
      },
      {
        "question": "12. Explain disconnected architecture of ADO.NET.",
        "answer": "The disconnected architecture of ADO.NET refers to the approach where the connection to the database is temporary. Once data is retrieved or updated, the connection is closed, and the application works with an in-memory representation of the data. This improves scalability and reduces database load.\n\n### Key Components of Disconnected Architecture:\n1. **DataSet**:\n   - Acts as an in-memory representation of data retrieved from the database.\n   - Stores data in tables, rows, and columns.\n   - Works independently of the database after retrieval.\n\n2. **DataAdapter**:\n   - A bridge between the DataSet and the database.\n   - Facilitates retrieval of data into the DataSet using the `Fill()` method and updates changes to the database using the `Update()` method.\n\n3. **Connection Object**:\n   - Temporarily connects to the database for data retrieval or updates.\n   - Closed after the operation is completed, making the system scalable.\n\n4. **XML Support**:\n   - Data in the DataSet can be serialized to XML for data exchange in disconnected scenarios.\n\n### Advantages:\n- Reduces the database connection usage, minimizing server load.\n- Allows flexibility to work offline with data stored in memory.\n- Data changes can be synchronized with the database when needed.",
        "code": "'Example of Disconnected Architecture in ADO.NET:\nImports System.Data\nImports System.Data.SqlClient\n\nModule Program\n    Sub Main()\n        ' Database connection\n        Dim connString As String = \"Data Source=ServerName;Initial Catalog=DatabaseName;Integrated Security=True\"\n        Dim connection As New SqlConnection(connString)\n\n        ' DataAdapter for bridging DataSet and database\n        Dim dataAdapter As New SqlDataAdapter(\"SELECT * FROM Students\", connection)\n\n        ' DataSet to store data\n        Dim dataSet As New DataSet()\n\n        ' Filling DataSet\n        dataAdapter.Fill(dataSet, \"Students\")\n\n        ' Displaying data from DataSet\n        For Each row As DataRow In dataSet.Tables(\"Students\").Rows\n            Console.WriteLine($\"ID: {row(\"ID\")}, Name: {row(\"Name\")}\")\n        Next\n\n        ' Closing connection automatically handled by DataAdapter\n    End Sub\nEnd Module"
      },
      {
        "question": "13. What is DataSet and Data Provider? Discuss them in detail.",
        "answer": "**DataSet**:\nA DataSet is an in-memory representation of data retrieved from a database. It operates in a disconnected environment, meaning that after fetching the data, the connection to the database is closed, and the DataSet works independently. It can represent multiple tables with relationships and is highly flexible for manipulating data without needing constant database connectivity.\n\n### Key Components of DataSet:\n1. **DataTableCollection**: Contains all tables retrieved from the data source.\n2. **DataRelationCollection**: Defines relationships and links between tables within the DataSet.\n3. **DataRowCollection**: Represents all rows in a DataTable.\n4. **DataColumnCollection**: Represents all columns within a DataTable.\n5. **PrimaryKey**: Identifies a unique column in a DataTable.\n6. **DataView**: Provides a filtered, customized view of a DataTable.\n\n### Advantages:\n- Disconnected architecture ensures better scalability and reduces database load.\n- Facilitates offline manipulation of data.\n- Capable of storing data from multiple tables with defined relations.\n\n**Data Provider**:\nA Data Provider is a set of components used for connecting to a database, executing commands, and retrieving data. It interacts with the database and transfers the data to a DataSet or DataReader.\n\n### Key Components of Data Provider:\n1. **Connection**: Used to establish a connection with the data source.\n2. **Command**: Represents a SQL query or stored procedure used for data manipulation.\n3. **DataReader**: Provides a forward-only, read-only way to access data.\n4. **DataAdapter**: Acts as a bridge between the DataSet and the database to retrieve and save data.\n\n### Types of Data Providers:\n- **SQL Server Data Provider**: For Microsoft SQL Server.\n- **OLE DB Data Provider**: For data sources exposed via OLE DB.\n- **ODBC Data Provider**: For ODBC-compliant data sources.\n- **Oracle Data Provider**: For Oracle databases.\n\nData Providers ensure efficient interaction with databases while offering flexibility through components like DataAdapters and DataReaders.",
        "code": "'Example of DataSet and Data Provider in VB.NET:\nImports System.Data\nImports System.Data.SqlClient\n\nModule Program\n    Sub Main()\n        ' Connection string\n        Dim connString As String = \"Data Source=ServerName;Initial Catalog=DatabaseName;Integrated Security=True\"\n        Dim connection As New SqlConnection(connString)\n\n        ' DataAdapter and DataSet\n        Dim dataAdapter As New SqlDataAdapter(\"SELECT * FROM Students\", connection)\n        Dim dataSet As New DataSet()\n\n        ' Fill DataSet\n        dataAdapter.Fill(dataSet, \"Students\")\n\n        ' Display Data\n        For Each row As DataRow In dataSet.Tables(\"Students\").Rows\n            Console.WriteLine($\"ID: {row(\"ID\")}, Name: {row(\"Name\")}\")\n        Next\n    End Sub\nEnd Module"
      }
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    ]
  },
  "practical": {
    "mcq": [
      {
        "question": "1. Which language is commonly used for practical programming in BCA?",
        "options": ["a) C#", "b) HTML"],
        "correctAnswer": "a",
        "id": "practical-q1"
      }
    ],
    "onemarks": [
      {
        "question": "1. What is a practical program?",
        "answer": "A practical program is a hands-on coding exercise that demonstrates the application of theoretical concepts in a real-world scenario."
      }
    ],
    "long": [
      {
        "question": "1. Write a program to implement a simple calculator.",
        "answer": "Here is a sample program in C# to implement a simple calculator:\n\nusing System;\n\nclass Calculator {\n    static void Main(string[] args) {\n        Console.WriteLine(\"Enter two numbers:\");\n        double num1 = Convert.ToDouble(Console.ReadLine());\n        double num2 = Convert.ToDouble(Console.ReadLine());\n        \n        Console.WriteLine(\"Select operation (+, -, *, /):\");\n        char operation = Convert.ToChar(Console.ReadLine());\n        \n        double result = 0;\n        switch (operation) {\n            case '+':\n                result = num1 + num2;\n                break;\n            case '-':\n                result = num1 - num2;\n                break;\n            case '*':\n                result = num1 * num2;\n                break;\n            case '/':\n                result = num1 / num2;\n                break;\n            default:\n                Console.WriteLine(\"Invalid operation\");\n                return;\n        }\n        Console.WriteLine($\"Result: {result}\");\n    }\n}"
      }
    ]
  }
}