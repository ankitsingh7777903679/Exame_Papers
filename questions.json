{
  "iot": {
    "mcq": [
      {
        "question": "1. What does IoT stand for?",
        "options": ["a) Internet of Things", "b) Internet of Technology"],
        "correctAnswer": "a",
        "id": "iot-q1"
      }
    ],
    "onemarks": [
      {
        "question": "1. What is IoT?",
        "answer": "Internet of Things (IoT) is a network of physical objects or people called 'things' that are embedded with software, electronics, network, and sensors that allow these objects to collect and exchange data."
      }
    ],
    "long": [
      {
        "question": "1. Explain the architecture of IoT.",
        "answer": "The IoT architecture consists of several layers:\n- **Perception Layer**: Includes sensors and devices that collect data.\n- **Network Layer**: Facilitates communication between devices using protocols like Wi-Fi, Bluetooth, etc.\n- **Application Layer**: Provides user interfaces and services, such as smart home apps or healthcare monitoring systems.\nEach layer works together to enable seamless data flow and automation."
      }
    ]
  },
  "java": {
    "mcq": [
      {
        "question": "1. What does JVM stand for?",
        "options": ["a) Java Virtual Machine", "b) Java Variable Machine"],
        "correctAnswer": "a",
        "id": "java-q1"
      }
    ],
    "onemarks": [
      {
        "question": "1. What is JVM?",
        "answer": "The Java Virtual Machine (JVM) is an abstract computing machine that enables a computer to run a Java program."
      },
      {
        "question": "2. What is the unsigned right shift operator in Java?",
        "answer": "The unsigned right shift, also known as the zero-fill right shift, is a bit manipulation operation in Java. It shifts the bits of a number to the right, and instead of preserving the sign bit (like the signed right shift), it fills the leftmost bits with zeros. This is represented by the operator >>> in Java.",
        "code": "int number = -8; // Binary: 11111111111111111111111111111000\nint result = number >>> 2; // Shifts"
      },
      {
        "question": "3. Give Use of this keyword.",
        "answer": "In Java, the this keyword is a reference to the current object in a method or constructor.",
        "code": "public void setName(String name) {\n    this.name = name; // Refers to the instance variable 'name'\n}\n\npublic Person(String name) {\n    this(name, 25); // Calls the constructor with two parameters\n}\n\npublic Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n}"
      },
      {
        "question": "4. What is the difference between checked and unchecked exceptions?",
        "answer": "Checked exceptions are checked at compile time, requiring the programmer to handle them using try-catch blocks or by declaring them in the method signature using throws. Examples include IOException and SQLException.\n Unchecked exceptions occur at runtime and are not checked during compilation. They typically represent programming errors, such as NullPointerException and ArrayIndexOutOfBoundsException.",
        "code": ""
      },
      {
        "question": "5. What is garbage collection?",
        "answer": "Garbage collection in Java is the process of automatically identifying and removing objects that are no longer in use to reclaim memory and prevent memory leaks. This ensures efficient memory management without requiring explicit deallocation by the programmer.",
        "code": ""
      },
      {
        "question": "6. List methods of the Graphics class.",
        "answer": "The Graphics class in Java provides methods for drawing shapes, text, and images. Common methods include drawLine(), drawRect(), drawOval(), drawString(), setColor(), and fillRect(). These methods are used in graphical programming for creating custom drawings.",
        "code": ""
      }
    ],
    "long": [
      {
        "question": "1. What are the features of Java?",
        "answer": "Java is a powerful, versatile programming language that is widely used in software development. Its features are what make it stand out as an efficient and robust language. Here are the detailed features:\n\n1. **Platform Independence:** Java's 'Write Once, Run Anywhere' principle allows code compiled on one platform to run seamlessly on another, thanks to the Java Virtual Machine (JVM).\n\n2. **Object-Oriented:** Java adopts the object-oriented programming paradigm, encouraging modular and reusable code by organizing it into classes and objects.\n\n3. **Robust:** With features like garbage collection, exception handling, and memory allocation, Java minimizes programming errors and ensures a stable runtime environment.\n\n4. **Secure:** Java applications are run in a secure environment. The security manager defines access rules for classes, providing protection against unauthorized access.\n\n5. **Multithreaded:** Java supports multithreading, enabling the simultaneous execution of two or more threads for maximum utilization of the CPU.\n\n6. **High Performance:** Java achieves high performance through the Just-In-Time (JIT) compiler, which translates bytecode into native machine code at runtime.\n\n7. **Dynamic and Extensible:** Java supports dynamic linking of classes at runtime and allows integration with libraries, making applications adaptable and flexible.\n\n8. **Rich API:** Java provides a wide array of built-in libraries for tasks like data structures, networking, GUI development, and more.\n\nHere’s a program that demonstrates some of these features, such as platform independence, object-oriented programming, and multithreading:\n\n",
        "code": "public class JavaFeaturesDemo implements Runnable {\n    private String message;\n\n    public JavaFeaturesDemo(String message) {\n        this.message = message; // Object-Oriented: Encapsulation\n    }\n\n    @Override\n    public void run() {\n        System.out.println(message);\n    }\n\n    public static void main(String[] args) {\n        Thread thread1 = new Thread(new JavaFeaturesDemo(\"Hello from Thread 1!\"));\n        Thread thread2 = new Thread(new JavaFeaturesDemo(\"Hello from Thread 2!\"));\n\n        thread1.start(); // Multithreading: Starts Thread 1\n        thread2.start(); // Multithreading: Starts Thread 2\n\n        System.out.println(\"Java is platform-independent, robust, and dynamic!\");\n    }\n}"
      },
      {
        "question": "2. Explain Java programming structure.",
        "answer": "A Java program follows a specific structure that ensures the program is organized, readable, and executable. The structure consists of the following components:\n\n1. **Package Declaration (Optional):** If the program belongs to a specific package, it begins with a package declaration.\n   Example: `package myPackage;`\n\n2. **Import Statements (Optional):** To include libraries or classes from Java's API, the `import` keyword is used.\n   Example: `import java.util.Scanner;`\n\n3. **Class Definition:** Every Java program is written inside a class. The class name must match the filename (if it is public).\n   Example: `public class MyProgram { ... }`\n\n4. **Main Method:** The `main` method serves as the entry point for program execution. Its signature is `public static void main(String[] args) { ... }`.\n\n5. **Variables and Methods:** Inside the class, you define variables and methods to perform specific tasks.\n   Example: `int num = 10;`\n\n6. **Comments:** Comments are added for clarity and do not affect program execution. They can be single-line (`//`) or multi-line (`/* */`).\n\nHere’s an example program that demonstrates the Java programming structure:",
        "code": "package myPackage;\n\nimport java.util.Scanner;\n\npublic class MyProgram {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter your name: \");\n        String name = scanner.nextLine(); // Reads user input\n        System.out.println(\"Hello, \" + name + \"!\"); // Prints output\n        scanner.close();\n    }\n}"
      },
      {
        "question": "3. Explain the static keyword in detail with its types.",
        "answer": "In Java, the static keyword is used to create variables, methods, blocks, or nested classes that are shared across all instances of the class. Static members belong to the class rather than any specific instance, making them memory efficient and easily accessible without creating an object.\n\n### Types of Static Members:\n\n1. **Static Variables:**\n   - Also known as class variables.\n   - These are shared across all objects of the class and only a single copy of the variable is maintained.\n   - Example: `static int count;`\n\n2. **Static Methods:**\n   - These are methods that can be called without creating an object of the class.\n   - Static methods cannot access instance variables or methods directly; they can only access other static members.\n   - Example: `static void display();`\n\n3. **Static Blocks:**\n   - A static block is used for initializing static variables.\n   - It is executed only once, when the class is loaded.\n   - Example:\n     ```java\n     static {\n         System.out.println(\"Static block executed!\");\n     }\n     ```\n\n4. **Static Nested Classes:**\n   - A static nested class is a class defined inside another class with the static modifier.\n   - It can be instantiated without an object of the outer class.\n   - Example:\n     ```java\n     static class NestedClass {\n         void display() {\n             System.out.println(\"Inside static nested class\");\n         }\n     }\n     ```",
        "code": "public class StaticKeywordDemo {\n    // Static variable\n    static int count = 0;\n\n    // Static method\n    static void displayCount() {\n        System.out.println(\"Count: \" + count);\n    }\n\n    // Static block\n    static {\n        count = 10;\n        System.out.println(\"Static block executed! Count initialized to \" + count);\n    }\n\n    // Static nested class\n    static class NestedClass {\n        void showMessage() {\n            System.out.println(\"Hello from the static nested class!\");\n        }\n    }\n\n    public static void main(String[] args) {\n        // Accessing static variable and method\n        StaticKeywordDemo.displayCount(); // Outputs: Count: 10\n\n        // Instantiating the static nested class\n        StaticKeywordDemo.NestedClass nested = new StaticKeywordDemo.NestedClass();\n        nested.showMessage(); // Outputs: Hello from the static nested class!\n    }\n}"
      },
      {
        "question": "4. Explain runtime polymorphism using an interface.",
        "answer": "Runtime polymorphism in Java occurs when a call to an overridden method is resolved at runtime rather than compile time. It is achieved by method overriding, typically through inheritance or interfaces. When a class implements an interface and provides implementations for its methods, the actual method that gets executed depends on the runtime type of the object being referred to, not the type of the reference variable. This enables dynamic method dispatch.\n\nInterfaces are used to achieve runtime polymorphism by defining a common method signature that different classes can implement differently. The appropriate implementation is determined at runtime based on the actual object being used.",
        "code": "interface Animal {\n    void sound(); // Interface method\n}\n\nclass Dog implements Animal {\n    @Override\n    public void sound() {\n        System.out.println(\"Woof\");\n    }\n}\n\nclass Cat implements Animal {\n    @Override\n    public void sound() {\n        System.out.println(\"Meow\");\n    }\n}\n\npublic class RuntimePolymorphismDemo {\n    public static void main(String[] args) {\n        Animal myAnimal;\n\n        myAnimal = new Dog(); // Runtime decision\n        myAnimal.sound(); // Outputs: Woof\n\n        myAnimal = new Cat(); // Runtime decision\n        myAnimal.sound(); // Outputs: Meow\n    }\n}"
      },
      {
        "question": "5. Give the difference between String and StringBuffer, and explain any 4 methods of the String class.",
        "answer": "**Difference between String and StringBuffer:**\n\n1. **Mutability:**\n   - String: Immutable. Any modification creates a new object.\n   - StringBuffer: Mutable. Modifications occur within the same object.\n\n2. **Performance:**\n   - String: Slower for frequent modifications due to object creation.\n   - StringBuffer: Faster for frequent modifications as it doesn’t create new objects.\n\n3. **Thread-Safety:**\n   - String: Not thread-safe.\n   - StringBuffer: Thread-safe because its methods are synchronized.\n\n4. **Usage:**\n   - String: Used when data doesn’t change frequently.\n   - StringBuffer: Used when data changes frequently (e.g., in loops).\n\n**4 Methods of the String Class:**\n\n1. **length():** Returns the length of the string.\n   ```java\n   String str = \"Hello\";\n   int len = str.length(); // Output: 5\n   ```\n\n2. **charAt(int index):** Returns the character at the specified index.\n   ```java\n   String str = \"Hello\";\n   char ch = str.charAt(1); // Output: 'e'\n   ```\n\n3. **substring(int beginIndex, int endIndex):** Returns a substring from the specified range.\n   ```java\n   String str = \"Hello World\";\n   String sub = str.substring(0, 5); // Output: \"Hello\"\n   ```\n\n4. **toUpperCase():** Converts all characters of the string to uppercase.\n   ```java\n   String str = \"hello\";\n   String upper = str.toUpperCase(); // Output: \"HELLO\"\n   ```",
        "code": "public class StringBufferDemo {\n    public static void main(String[] args) {\n        // Using StringBuffer for efficient modifications\n        StringBuffer sb = new StringBuffer(\"Hello\");\n        sb.append(\" World\"); // Modifies the same object\n        System.out.println(sb); // Output: Hello World\n\n        // Demonstrating String immutability\n        String str = \"Hello\";\n        String newStr = str.concat(\" World\"); // Creates a new object\n        System.out.println(newStr); // Output: Hello World\n    }\n}"
      },
      {
        "question": "6. Explain try, catch, and finally keywords in Java.",
        "answer": "In Java, the try, catch, and finally keywords are used for exception handling, enabling developers to handle runtime errors gracefully and maintain normal program flow.\n\n1. **try block:** The try block contains the code that might throw an exception. If an exception occurs, it is passed to the corresponding catch block.\n   \n2. **catch block:** The catch block is used to handle specific exceptions. You can have multiple catch blocks to handle different types of exceptions separately.\n   \n3. **finally block:** The finally block contains code that will execute regardless of whether an exception was thrown or caught. It is typically used for cleanup activities, such as closing resources.",
        "code": "public class ExceptionHandlingDemo {\n    public static void main(String[] args) {\n        try {\n            int result = 10 / 0; // This will throw an ArithmeticException\n            System.out.println(\"Result: \" + result);\n        } catch (ArithmeticException e) {\n            System.out.println(\"Exception caught: Division by zero.\");\n        } finally {\n            System.out.println(\"Finally block executed.\"); // Cleanup code\n        }\n    }\n}"
      },
      {
        "question": "7. What is a thread? Explain thread lifecycle.",
        "answer": "A thread in Java is the smallest unit of a process that runs independently. It is a lightweight subprocess and is part of a multithreaded environment, allowing multiple tasks to run concurrently within a program. Threads enhance the efficiency of CPU utilization by enabling parallel execution.\n\n**Thread Lifecycle:**\n1. **New (Created):** A thread begins its lifecycle in the 'new' state when it is created using the `Thread` class or implementing the `Runnable` interface but hasn't started executing.\n   Example: `Thread t = new Thread();`\n\n2. **Runnable:** The thread enters the runnable state after the `start()` method is called. It is ready to run and waiting for CPU scheduling.\n\n3. **Running:** When a thread scheduler selects the thread, it moves to the running state, where the `run()` method executes.\n\n4. **Blocked/Waiting:** The thread enters this state if it is waiting for some resource or signal, such as waiting for I/O operations to complete.\n\n5. **Terminated:** The thread ends its lifecycle after completing execution or when it is explicitly stopped.",
        "code": "class MyThread extends Thread {\n        public void run() {\n        System.out.println(\"Thread is running...\");\n    }\n\n    public static void main(String[] args) {\n        MyThread thread = new MyThread();\n        thread.start(); // Moves thread to Runnable state\n    }\n}"
      },
      {
        "question": "8. What is a package? Explain package creation and import in detail with an example.",
        "answer": "In Java, a package is a way of grouping related classes and interfaces together, which helps in organizing code and avoiding name conflicts. Packages also make it easier to manage access control and reuse code.\n\n**Types of Packages:**\n1. **Built-in Packages:** Java provides several built-in packages like `java.util` (for utility classes) and `java.io` (for input/output operations).\n2. **User-defined Packages:** Developers can create their own packages to organize their classes as per their needs.\n\n**Steps to Create and Import a Package:**\n\n1. **Creating a Package:**\n   - Use the `package` keyword at the beginning of the Java file to specify the package name.\n   - Save the file in a folder that matches the package name.\n\n   Example:\n   ```java\n   package mypackage;\n\n   public class MyClass {\n       public void displayMessage() {\n           System.out.println(\"Hello from MyClass in mypackage!\");\n       }\n   }\n   ```\n\n   Save this file as `MyClass.java` inside a folder named `mypackage`.\n\n2. **Compiling the Package:**\n   - Compile the file using the command: `javac -d . MyClass.java`\n   - The `-d .` option creates the package structure in the current directory.\n\n3. **Using the Package:**\n   - Import the package in another class using the `import` keyword.\n   - Call the methods or access the classes from the package.\n\n   Example:\n   ```java\n   import mypackage.MyClass;\n\n   public class TestPackage {\n       public static void main(String[] args) {\n           MyClass obj = new MyClass();\n           obj.displayMessage();\n       }\n   }\n   ```\n\n4. **Running the Program:**\n   - Compile the `TestPackage.java` file.\n   - Run the program: `java TestPackage`\n\nThe output will be: \"Hello from MyClass in mypackage!\"\n\nPackages improve code modularity and reusability and make large-scale development more manageable.",
        "code": "package mypackage;\n\npublic class MyClass {\n    public void displayMessage() {\n        System.out.println(\"Hello from MyClass in mypackage!\");\n    }\n}\n\n// File: TestPackage.java\nimport mypackage.MyClass;\n\npublic class TestPackage {\n    public static void main(String[] args) {\n        MyClass obj = new MyClass();\n        obj.displayMessage();\n    }\n}"
      },
      {
        "question": "9. What is <applet>? How can we pass parameters to an applet?",
        "answer": "In Java, `<applet>` is an HTML tag that is used to embed a Java applet in a webpage. Applets are small Java applications that run within a web browser or an applet viewer. Although applets are now considered outdated, they were widely used for interactive web applications.\n\n**Passing Parameters to an Applet:**\n1. Parameters can be passed to an applet using the `<param>` tag inside the `<applet>` tag in an HTML file.\n2. The applet can retrieve these parameters using the `getParameter(String name)` method in the Java code.\n\nThe `<param>` tag specifies the name and value of the parameter. The applet reads these values during its execution.",
        "code": "import java.applet.Applet;\nimport java.awt.Graphics;\n\npublic class ParamApplet extends Applet {\n    String message;\n\n    @Override\n    public void init() {\n        message = getParameter(\"message\"); // Retrieves the parameter value\n        if (message == null) {\n            message = \"Default Message\"; // Fallback if no parameter is passed\n        }\n    }\n\n    @Override\n    public void paint(Graphics g) {\n        g.drawString(message, 20, 20); // Displays the message\n    }\n}\n\n// Corresponding HTML File\n// <html>\n// <body>\n// <applet code=\"ParamApplet.class\" width=\"300\" height=\"100\">\n// <param name=\"message\" value=\"Hello, Applet!\">\n// </applet>\n// </body>\n// </html>"
      },
      {
        "question": "10. What is method overloading? Differentiate between method overloading and overriding.",
        "answer": "Method overloading is a feature in Java where two or more methods in the same class share the same name but differ in their parameter lists (number, type, or order of parameters). It provides multiple ways to perform a similar task.\n\n**Difference Between Method Overloading and Method Overriding:**\n1. **Definition:**\n   - Overloading: Allows multiple methods with the same name but different parameter lists within the same class.\n   - Overriding: Redefines a method of the parent class in the child class to provide a specific implementation.\n\n2. **Parameters:**\n   - Overloading: Parameters must be different (number, type, or order).\n   - Overriding: Parameters must be the same as the parent class method.\n\n3. **Access:**\n   - Overloading: Can exist in the same or different classes (inheritance not required).\n   - Overriding: Requires inheritance, as the method is redefined in a child class.\n\n4. **Binding:**\n   - Overloading: Resolved at compile time (static binding).\n   - Overriding: Resolved at runtime (dynamic binding).",
        "code": "class OverloadingDemo {\n    // Overloaded methods\n    void display(int a) {\n        System.out.println(\"Display with an integer: \" + a);\n    }\n\n    void display(String str) {\n        System.out.println(\"Display with a string: \" + str);\n    }\n\n    public static void main(String[] args) {\n        OverloadingDemo obj = new OverloadingDemo();\n        obj.display(10);  // Calls the first method\n        obj.display(\"Hello\");  // Calls the second method\n    }\n}\n\nclass Parent {\n    void show() {\n        System.out.println(\"Parent show method\");\n    }\n}\n\nclass Child extends Parent {\n    // Override\n    void show() {\n        System.out.println(\"Child show method\");\n    }\n\n    public static void main(String[] args) {\n        Parent obj = new Child(); // Upcasting\n        obj.show(); // Calls the overridden method in Child class\n    }\n}"
      },
      {
        "question": "11. Explain bitwise operators in Java.",
        "answer": "Bitwise operators in Java perform operations on individual bits of integer types, such as int and long. They are used for low-level programming, such as working with flags or manipulating binary data. \n\n**Bitwise Operators:**\n\n1. **AND (&):** Performs a bitwise AND operation. It returns 1 if both corresponding bits are 1; otherwise, it returns 0.\n   Example: `5 & 3` (Binary: 0101 & 0011) Result: 1 (Binary: 0001).\n\n2. **OR (|):** Performs a bitwise OR operation. It returns 1 if either of the corresponding bits is 1.\n   Example: `5 | 3` (Binary: 0101 | 0011) Result: 7 (Binary: 0111).\n\n3. **XOR (^):** Performs a bitwise XOR operation. It returns 1 if the corresponding bits are different; otherwise, it returns 0.\n   Example: `5 ^ 3` (Binary: 0101 ^ 0011) Result: 6 (Binary: 0110).\n\n4. **Complement (~):** Inverts all bits of the number. Each 0 becomes 1 and each 1 becomes 0.\n   Example: `~5` (Binary: ~0101) Result: -6 (Binary for -6 in two's complement: 1010).\n\n5. **Left Shift (<<):** Shifts bits to the left and fills zeros in the vacant positions. It effectively multiplies the number by 2 for each shift.\n   Example: `5 << 1` (Binary: 0101 << 1) Result: 10 (Binary: 1010).\n\n6. **Right Shift (>>):** Shifts bits to the right and fills the leftmost positions with the sign bit (0 for positive numbers, 1 for negative numbers). It effectively divides the number by 2 for each shift.\n   Example: `5 >> 1` (Binary: 0101 >> 1) Result: 2 (Binary: 0010).\n\n7. **Unsigned Right Shift (>>>):** Shifts bits to the right and fills the leftmost positions with 0, regardless of the sign.\n   Example: `-5 >>> 1` (Binary: -5 in two's complement is 11111111 11111111 11111111 11111011; >>> 1) Result: 2147483645.",
        "code": "public class BitwiseOperatorsDemo {\n    public static void main(String[] args) {\n        int a = 5; // Binary: 0101\n        int b = 3; // Binary: 0011\n\n        // Bitwise AND\n        System.out.println(\"a & b: \" + (a & b)); // Output: 1\n\n        // Bitwise OR\n        System.out.println(\"a | b: \" + (a | b)); // Output: 7\n\n        // Bitwise XOR\n        System.out.println(\"a ^ b: \" + (a ^ b)); // Output: 6\n\n        // Bitwise Complement\n        System.out.println(\"~a: \" + (~a)); // Output: -6\n\n        // Left Shift\n        System.out.println(\"a << 1: \" + (a << 1)); // Output: 10\n\n        // Right Shift\n        System.out.println(\"a >> 1: \" + (a >> 1)); // Output: 2\n\n        // Unsigned Right Shift\n        System.out.println(\"-5 >>> 1: \" + (-5 >>> 1)); // Output: 2147483645\n    }\n}"
      },
      {
        "question": "12. What is a singly linked list? Write a program to create and display a singly linked list.",
        "answer": "A singly linked list is a linear data structure in which each element (called a node) contains two parts: data and a reference (or link) to the next node in the sequence. The last node's reference points to null, indicating the end of the list. Singly linked lists are dynamic and allow for efficient insertion and deletion operations.",
        "code": "class Node {\n    int data;\n    Node next; // Reference to the next node\n\n    Node(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n\npublic class SinglyLinkedList {\n    private Node head; // Head of the linked list\n\n    // Method to add a new node to the linked list\n    public void addNode(int data) {\n        Node newNode = new Node(data);\n\n        if (head == null) {\n            head = newNode;\n        } else {\n            Node temp = head;\n            while (temp.next != null) {\n                temp = temp.next;\n            }\n            temp.next = newNode;\n        }\n    }\n\n    // Method to display the linked list\n    public void displayList() {\n        Node temp = head;\n        while (temp != null) {\n            System.out.print(temp.data + \" -> \");\n            temp = temp.next;\n        }\n        System.out.println(\"null\");\n    }\n\n    public static void main(String[] args) {\n        SinglyLinkedList list = new SinglyLinkedList();\n\n        // Adding nodes to the linked list\n        list.addNode(10);\n        list.addNode(20);\n        list.addNode(30);\n\n        // Displaying the linked list\n        System.out.println(\"Singly Linked List:\");\n        list.displayList();\n    }\n}"
      },
      {
        "question": "13. Write a program to accept a number from the command line and raise a user-defined exception if it is a negative number.",
        "answer": "The program demonstrates how to accept a number as a command-line argument, check if it is negative, and raise a user-defined exception if it is. User-defined exceptions are created by extending the Exception class.",
        "code": "class NegativeNumberException extends Exception {\n    public NegativeNumberException(String message) {\n        super(message);\n    }\n}\n\npublic class CustomExceptionDemo {\n    public static void main(String[] args) {\n        try {\n            if (args.length == 0) {\n                throw new IllegalArgumentException(\"Please provide a number as a command-line argument.\");\n            }\n\n            int number = Integer.parseInt(args[0]);\n\n            if (number < 0) {\n                throw new NegativeNumberException(\"Negative numbers are not allowed: \" + number);\n            }\n\n            System.out.println(\"The number is: \" + number);\n        } catch (NegativeNumberException e) {\n            System.out.println(\"Exception caught: \" + e.getMessage());\n        } catch (NumberFormatException e) {\n            System.out.println(\"Invalid input. Please enter a valid integer.\");\n        } catch (Exception e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n    }\n}"
      }
      
    ]
  },
  "wd": {
    "mcq": [
      {
        "question": "1. What does HTML stand for?",
        "options": ["a) HyperText Markup Language", "b) HyperTransfer Markup Language"],
        "correctAnswer": "a",
        "id": "wd-q1"
      }
    ],
    "onemarks": [
      {
        "question": "1. What is HTML?",
        "answer": "HTML (HyperText Markup Language) is the standard markup language used to create web pages."
      }
    ],
    "long": [
      {
        "question": "1. Explain the structure of an HTML document.",
        "answer": "An HTML document has the following structure:\n- **<!DOCTYPE html>**: Declares the document type as HTML5.\n- **<html>**: The root element of the page.\n- **<head>**: Contains metadata, such as the title and links to CSS/JavaScript.\n- **<body>**: Contains the visible content, such as text, images, and links."
      }
    ]
  },
  "net": {
    "mcq": [
      {
        "question": "1. What is CTS?",
        "options": ["a) Common Language Specification", "b) Code Translation System"],
        "correctAnswer": "a",
        "id": "net-q1"
      }
    ],
    "onemarks": [
      {
        "question": "1. What is boxing in VB.NET?",
        "answer": "Boxing is the process of converting a value type (e.g., Integer, Double) into a reference type (Object) in VB.NET. This allows value types to be treated as objects, enabling them to be used in scenarios requiring reference types.",
        "code": "Dim value As Integer = 42\n Dim boxedValue As Object = value ' Boxing occurs here,:\n Dim unboxedValue As Integer = CType(boxedValue, Integer) ' Unboxing occurs here"
      },
      {
        "question": "2. What is unmanaged code?",
        "answer": "Unmanaged code refers to code that is executed directly by the operating system, outside the control of the .NET Framework's runtime (CLR). It is typically written in languages like C or C++ and relies on manual memory management and platform-specific APIs. Unlike managed code, it does not benefit from automatic memory management, garbage collection, or type safety provided by the CLR.",
        "code": "#include <iostream>\n using namespace std;\n int main() {\n     cout << \"Hello, unmanaged world!\" << endl;\n     return 0;\n }"
      },
      {
        "question": "3. What is the use of the Filter property of the OpenFileDialog control?",
        "answer": "The Filter property of the OpenFileDialog control specifies the file types that the dialog box will display. It allows developers to limit the file selection by setting a specific filter string. This enhances usability by showing only relevant files to the user.",
        "code": "Dim openFileDialog As New OpenFileDialog\nopenFileDialog.Filter = \"Text Files (*.txt)|*.txt|All Files (*.*)|*.*\"\nIf openFileDialog.ShowDialog() = DialogResult.OK Then\n    MessageBox.Show(\"Selected File: \" & openFileDialog.FileName)\nEnd If"
      },
      {
        "question": "4. What is the difference between an Array and a Collection in VB.NET?",
        "answer": "An Array and a Collection are used to store groups of items in VB.NET, but they differ in terms of features and usage:",
        "code": "'Array example:\n'Fixed size and single data type\nDim arr(4) As Integer\narr(0) = 10\narr(1) = 20\n\n'Collection example:\n'Dynamic size and can store multiple data types\nDim list As New ArrayList()\nlist.Add(10) 'Adding integer\nlist.Add(\"Hello\") 'Adding string"
      },
      {
        "question": "5. How to resize an Array in VB.NET?",
        "answer": "To resize an array in VB.NET, you can use the ReDim statement. This statement can change the size of an array dynamically at runtime. If you want to preserve the existing elements while resizing, you can use ReDim Preserve.",
        "code": "'Example without preserving elements:\nDim arr() As Integer = {1, 2, 3}\nReDim arr(5) ' Resize the array to hold 6 elements\n\n'Example with preserving elements:\nDim arr() As Integer = {1, 2, 3}\nReDim Preserve arr(5) ' Resize the array and keep the existing values"
      },
      {
        "question": "6. Explain Add and Insert methods of ListBox in VB.NET.",
        "answer": "The Add and Insert methods of the ListBox control in VB.NET are used to add items to the ListBox. While both methods add items, they differ in functionality and use cases:",
        "code": "'Add method:\n'Adds an item to the end of the ListBox.\nDim listBox1 As New ListBox()\nlistBox1.Items.Add(\"Item1\") ' Adds 'Item1' to the end of the ListBox.\n\n'Insert method:\n'Inserts an item at a specific index in the ListBox.\nlistBox1.Items.Insert(0, \"NewItem\") ' Inserts 'NewItem' at the 0th index."
      },
      {
        "question": "7. List various dialog controls in VB.NET.",
        "answer": "VB.NET provides several dialog controls that allow interaction with users for specific tasks, such as file selection, color picking, and printing. These include:",
        "code": "'1. OpenFileDialog:\nDim openFileDialog As New OpenFileDialog\nopenFileDialog.Filter = \"Text Files (*.txt)|*.txt|All Files (*.*)|*.*\"\nIf openFileDialog.ShowDialog() = DialogResult.OK Then\n    MessageBox.Show(\"Selected File: \" & openFileDialog.FileName)\nEnd If\n\n'2. SaveFileDialog:\nDim saveFileDialog As New SaveFileDialog\nsaveFileDialog.Filter = \"Text Files (*.txt)|*.txt\"\nIf saveFileDialog.ShowDialog() = DialogResult.OK Then\n    MessageBox.Show(\"File saved as: \" & saveFileDialog.FileName)\nEnd If\n\n'3. FolderBrowserDialog:\nDim folderBrowserDialog As New FolderBrowserDialog\nIf folderBrowserDialog.ShowDialog() = DialogResult.OK Then\n    MessageBox.Show(\"Selected Folder: \" & folderBrowserDialog.SelectedPath)\nEnd If\n\n'4. ColorDialog:\nDim colorDialog As New ColorDialog\nIf colorDialog.ShowDialog() = DialogResult.OK Then\n    MessageBox.Show(\"Selected Color: \" & colorDialog.Color.ToString())\nEnd If\n\n'5. FontDialog:\nDim fontDialog As New FontDialog\nIf fontDialog.ShowDialog() = DialogResult.OK Then\n    MessageBox.Show(\"Selected Font: \" & fontDialog.Font.Name)\nEnd If\n\n'6. PrintDialog:\nDim printDialog As New PrintDialog\nIf printDialog.ShowDialog() = DialogResult.OK Then\n    MessageBox.Show(\"Print job initiated.\")\nEnd If"
      },
      {
        "question": "8. What is the use of Option Explicit in VB.NET?",
        "answer": "Option Explicit is a directive in VB.NET that forces the programmer to declare all variables explicitly before using them. When enabled, it prevents the use of undeclared variables, reducing errors caused by typos or unintended variable creation. This makes the code easier to debug and maintain.",
        "code": "'Enable Option Explicit:\nOption Explicit On\n\n'Example:\nDim num As Integer ' Explicitly declared\nnum = 10 ' Assigning a value to the declared variable\n\nDim result As Integer = num * 2 ' Valid operation because variables are declared\n\n'Error Example with Option Explicit On:\nx = 5 ' This would cause a compilation error since x is not declared"
      },
      {
        "question": "9. What is the use of the MustInherit keyword in VB.NET?",
        "answer": "The MustInherit keyword in VB.NET is used to define an abstract class. An abstract class serves as a base class and cannot be instantiated directly. It is designed to provide a blueprint for derived classes, which must implement all the abstract members defined in the base class. This ensures a consistent implementation across all derived classes.",
        "code": "'Example:\nMustInherit Class Shape\n    Public MustOverride Function GetArea() As Double ' Abstract method\nEnd Class\n\nClass Circle\n    Inherits Shape\n    Private radius As Double\n\n    Public Sub New(r As Double)\n        radius = r\n    End Sub\n\n    Public Overrides Function GetArea() As Double\n        Return Math.PI * radius * radius ' Implements abstract method\n    End Function\nEnd Class\n\n'Usage:\nDim myCircle As New Circle(5)\nMessageBox.Show(\"Area: \" & myCircle.GetArea())"
      },
      {
        "question": "10. Explain CType() function in VB.NET.",
        "answer": "The CType() function in VB.NET is used to explicitly convert an expression from one data type to another. It supports all types of conversions, including value types to reference types and vice versa. If the conversion is invalid, it throws an InvalidCastException.",
        "code": "'Example of CType():\nDim number As Integer = 42\nDim strNumber As String\nstrNumber = CType(number, String) ' Converts Integer to String\n\n'Example of invalid conversion:\nDim obj As Object = \"Hello\"\nDim num As Integer\nnum = CType(obj, Integer) ' Throws an exception since the conversion is invalid"
      }
      
    ],
    "long": [
      {
        "question": "1. Explain keyboard events in detail.",
        "answer": "Keyboard events in VB.NET are triggered when the user interacts with the keyboard. These events are primarily used to capture and handle key presses in applications for performing specific actions. The most common keyboard events are:\n\n1. **KeyDown**: This event occurs when a key is first pressed. It is commonly used to detect when a key is being held down.\n\n2. **KeyPress**: This event occurs after the KeyDown event and before the KeyUp event. It is triggered for character keys and can be used to filter or validate user input (e.g., allowing only numeric input).\n\n3. **KeyUp**: This event occurs when a key is released. It is useful for triggering actions after the user has finished pressing a key.\n\nEach of these events provides event arguments (`KeyEventArgs` or `KeyPressEventArgs`) that include properties like:\n\n- `KeyCode`: Represents the specific key pressed (e.g., A, B, Enter).\n- `KeyChar`: Represents the character corresponding to the key (used in KeyPress).\n- `Handled`: Can be set to True to prevent the event from being passed to the operating system.",
        "code": "'Example demonstrating keyboard events in VB.NET:\n\nPrivate Sub Form1_KeyDown(sender As Object, e As KeyEventArgs) Handles Me.KeyDown\n    If e.KeyCode = Keys.Enter Then\n        MessageBox.Show(\"Enter key pressed.\")\n    End If\nEnd Sub\n\nPrivate Sub Form1_KeyPress(sender As Object, e As KeyPressEventArgs) Handles Me.KeyPress\n    ' Allow only numeric input\n    If Not Char.IsDigit(e.KeyChar) AndAlso Not Char.IsControl(e.KeyChar) Then\n        e.Handled = True\n        MessageBox.Show(\"Only numeric input is allowed.\")\n    End If\nEnd Sub\n\nPrivate Sub Form1_KeyUp(sender As Object, e As KeyEventArgs) Handles Me.KeyUp\n    MessageBox.Show(\"Key released: \" & e.KeyCode.ToString())\nEnd Sub"
      },
      {
        "question": "2. Explain .NET Framework in detail.",
        "answer": ".NET Framework is a software development platform developed by Microsoft. It provides a comprehensive and consistent programming model for building various types of applications, such as web, desktop, mobile, and cloud-based applications. It includes a large class library called the Framework Class Library (FCL) and provides runtime environments for executing code, such as the Common Language Runtime (CLR). Key components include:\n\n1. **Common Language Runtime (CLR):** The CLR is the execution engine that handles running applications. It provides services like memory management, exception handling, garbage collection, and security.\n\n2. **Framework Class Library (FCL):** The FCL is a vast collection of reusable classes, interfaces, and value types that provide functionalities such as file manipulation, database interaction, XML parsing, and more.\n\n3. **Languages:** .NET supports multiple languages like C#, VB.NET, F#, etc. The Common Type System (CTS) and Common Language Specification (CLS) ensure compatibility and interoperability among these languages.\n\n4. **ASP.NET:** A part of the .NET Framework used for building dynamic web applications and services.\n\n5. **ADO.NET:** A data access technology within .NET for connecting to databases and performing CRUD operations.\n\n6. **Windows Forms and WPF:** Used to build rich Windows desktop applications.\n\n7. **Web Services and WCF:** Allow integration and communication between applications over the internet or other networks.",
        "code": "'Example of CLR Functionality:\n'Simple garbage collection demonstration:\nImports System\n\nModule Program\n    Sub Main()\n        Dim obj As Object = New Object()\n        Console.WriteLine(\"Object created.\")\n        obj = Nothing\n        GC.Collect()\n        Console.WriteLine(\"Garbage collection triggered.\")\n    End Sub\nEnd Module"
      },
      {
        "question": "3. Write a detailed note on looping, switch, and if statement in VB.NET.",
        "answer": "In VB.NET, looping, switch, and if statements are essential control structures used to manage the program's flow. They enable decision-making, conditional branching, and repetitive task handling, which are crucial for building logical programs.",
        "code": "'1. Looping:\n'Looping is used to execute a block of code repeatedly until a certain condition is met. Types of loops in VB.NET include:\n\n'For Loop:\nFor i As Integer = 1 To 5\n    Console.WriteLine(\"Iteration: \" & i)\nNext\n\n'While Loop:\nDim count As Integer = 0\nWhile count < 3\n    Console.WriteLine(\"Count: \" & count)\n    count += 1\nEnd While\n\n'Do While Loop (Condition checked at the beginning):\nDim num As Integer = 0\nDo While num < 3\n    Console.WriteLine(\"Number: \" & num)\n    num += 1\nLoop\n\n'Do Until Loop (Condition checked at the beginning):\nDim val As Integer = 0\nDo Until val > 3\n    Console.WriteLine(\"Value: \" & val)\n    val += 1\nLoop\n\n'2. Switch (Select Case):\n'The Select Case statement is an alternative to If...Else for multiple conditional checks. It simplifies code readability and efficiency.\nDim day As Integer = 3\nSelect Case day\n    Case 1\n        Console.WriteLine(\"Monday\")\n    Case 2\n        Console.WriteLine(\"Tuesday\")\n    Case 3\n        Console.WriteLine(\"Wednesday\")\n    Case Else\n        Console.WriteLine(\"Other Day\")\nEnd Select\n\n'3. If Statement:\n'If statements are used for conditional execution of code blocks. Variants include If...Then, If...Then...Else, and nested If statements.\nDim score As Integer = 85\nIf score >= 90 Then\n    Console.WriteLine(\"Grade: A\")\nElseIf score >= 80 Then\n    Console.WriteLine(\"Grade: B\")\nElse\n    Console.WriteLine(\"Grade: C\")\nEnd If\n\n'Nested If Statement Example:\nDim age As Integer = 20\nDim isMember As Boolean = True\nIf age > 18 Then\n    If isMember Then\n        Console.WriteLine(\"Eligible for Member Benefits\")\n    Else\n        Console.WriteLine(\"Eligible, but no Member Benefits\")\n    End If\nEnd If\n\n'These constructs provide powerful mechanisms for controlling the flow of execution, making programs more efficient and organized.'"
      },
      {
        "question": "4. Write about Common Language Runtime (CLR) in detail.",
        "answer": "The Common Language Runtime (CLR) is an integral component of the .NET Framework that acts as the execution engine for .NET applications. It manages code execution and provides numerous services to enhance development efficiency and application performance.\n\nKey Features of CLR:\n1. **Managed Code Execution**: CLR runs managed code written in supported .NET languages. It ensures safe execution by monitoring and controlling access to memory.\n2. **Garbage Collection (GC)**: Automatic memory management by releasing unused objects and preventing memory leaks.\n3. **Just-In-Time (JIT) Compilation**: Converts Intermediate Language (IL) code into native machine code at runtime for optimized performance.\n4. **Cross-Language Interoperability**: Through Common Type System (CTS) and Common Language Specification (CLS), CLR enables seamless interoperability between different .NET-supported languages.\n5. **Exception Handling**: Provides a structured mechanism for managing runtime errors to ensure application stability.\n6. **Security**: CLR enforces Code Access Security (CAS) and verifies IL code for safe execution.",
        "code": "'Example of CLR Functionality in VB.NET:\nImports System\n\nModule Program\n    Sub Main()\n        Dim num1 As Integer = 10\n        Dim num2 As Integer = 20\n        Console.WriteLine(\"The sum is: \" & (num1 + num2))\n    End Sub\nEnd Module"
      },
      {
        "question": "5. Explain Menu control and Context Menu control in VB.NET in detail.",
        "answer": "Menu controls and Context Menu controls are essential in VB.NET for providing user-friendly navigation and interaction. They allow users to execute commands or navigate through an application conveniently.",
        "code": "'Menu Control:\n'The Menu control is used to create a traditional menu bar in a VB.NET application. It allows the developer to organize commands in a structured hierarchy.\n\n'Example of Menu Control:\nDim menuStrip As New MenuStrip()\nDim fileMenu As New ToolStripMenuItem(\"File\")\nDim openMenuItem As New ToolStripMenuItem(\"Open\")\nDim exitMenuItem As New ToolStripMenuItem(\"Exit\")\n\n'Adding items to the menu:\nfileMenu.DropDownItems.Add(openMenuItem)\nfileMenu.DropDownItems.Add(exitMenuItem)\nmenuStrip.Items.Add(fileMenu)\nControls.Add(menuStrip)\n\n'Key Features:\n'1. It supports hierarchical menu structures (e.g., File > Open, Save).\n'2. Menu items can trigger specific actions using event handlers, such as:\nAddHandler exitMenuItem.Click, AddressOf ExitApplication\n\n'Private Sub ExitApplication(sender As Object, e As EventArgs)\n    Application.Exit()\nEnd Sub\n\n'Context Menu Control:\n'The Context Menu control (ContextMenuStrip) provides a shortcut menu that appears when a user right-clicks on an item or area of the application.\n\n'Example of Context Menu Control:\nDim contextMenu As New ContextMenuStrip()\nDim copyMenuItem As New ToolStripMenuItem(\"Copy\")\nDim pasteMenuItem As New ToolStripMenuItem(\"Paste\")\n\n'Adding items to the Context Menu:\ncontextMenu.Items.Add(copyMenuItem)\ncontextMenu.Items.Add(pasteMenuItem)\n\n'Associating the Context Menu with a control:\nDim textBox As New TextBox()\ntextBox.ContextMenuStrip = contextMenu\nControls.Add(textBox)\n\n'Key Features:\n'1. Context menus are associated with specific controls.\n'2. They appear on right-click, providing options relevant to the control (e.g., Copy, Paste for a TextBox).\n'3. Each menu item can trigger event handlers for corresponding actions, like:\nAddHandler copyMenuItem.Click, AddressOf CopyText\n\n'Private Sub CopyText(sender As Object, e As EventArgs)\n    MessageBox.Show(\"Copy action triggered.\")\nEnd Sub"
      },
      {
        "question": "6. Explain OpenFileDialog and ColorDialog in detail.",
        "answer": "In VB.NET, OpenFileDialog and ColorDialog are built-in dialog controls that provide user-friendly interfaces for selecting files and colors, respectively. They simplify interactions and ensure a standardized user experience.\n\n1. **OpenFileDialog**:\nThe OpenFileDialog control is used to allow users to browse and select files from their system. It provides several properties and events to customize and handle file selection effectively.\n- Key Properties:\n  - `Filter`: Sets the file types that the dialog will display (e.g., \"Text Files (*.txt)|*.txt|All Files (*.*)|*.*\").\n  - `FileName`: Gets the full path of the selected file.\n  - `InitialDirectory`: Sets the initial directory displayed when the dialog opens.\n  - `Multiselect`: Allows the selection of multiple files if set to True.\n  - `Title`: Sets the title of the dialog box.\n\n2. **ColorDialog**:\nThe ColorDialog control is used to present a color palette to the user, allowing them to choose colors for customizing the interface or graphics.\n- Key Properties:\n  - `Color`: Gets or sets the selected color.\n  - `FullOpen`: If set to True, the dialog opens with the full color palette expanded.\n  - `CustomColors`: Sets or retrieves an array of custom colors that the user has defined.\n\nThese dialog controls are simple to implement and ensure consistency in application design.",
        "code": "'Example of OpenFileDialog:\nDim openFileDialog As New OpenFileDialog()\nopenFileDialog.Filter = \"Text Files (*.txt)|*.txt|All Files (*.*)|*.*\"\nopenFileDialog.InitialDirectory = \"C:\\\\\"\nIf openFileDialog.ShowDialog() = DialogResult.OK Then\n    MessageBox.Show(\"Selected File: \" & openFileDialog.FileName)\nEnd If\n\n'Example of ColorDialog:\nDim colorDialog As New ColorDialog()\ncolorDialog.FullOpen = True\nIf colorDialog.ShowDialog() = DialogResult.OK Then\n    MessageBox.Show(\"Selected Color: \" & colorDialog.Color.ToString())\nEnd If"
      },
      {
        "question": "7. Explain Date-related functions in .NET.",
        "answer": ".NET provides extensive support for working with dates and times through the `DateTime` structure and its associated methods in the System namespace. These functions allow developers to perform operations such as calculating time differences, formatting dates, parsing strings into date formats, and much more.\n\nKey Date-related functions:\n\n1. **Creating DateTime objects**:\n   - `DateTime.Now`: Gets the current date and time.\n   - `DateTime.Today`: Gets the current date with time set to 00:00:00.\n   - `DateTime.UtcNow`: Gets the current date and time in Coordinated Universal Time (UTC).\n\n2. **Manipulating Dates**:\n   - `AddDays()`: Adds a specified number of days to the date.\n   - `AddMonths()`: Adds a specified number of months to the date.\n   - `AddYears()`: Adds a specified number of years to the date.\n   - `AddHours()`, `AddMinutes()`, `AddSeconds()`: Adds corresponding time values.\n\n3. **Formatting Dates**:\n   - `ToString()`: Converts a date to its string representation using a specified format.\n   - Example formats:\n     - `\"yyyy-MM-dd\"` (e.g., \"2025-03-18\").\n     - `\"dddd, MMMM dd, yyyy\"` (e.g., \"Tuesday, March 18, 2025\").\n\n4. **Parsing Dates**:\n   - `DateTime.Parse()`: Converts a string to a DateTime object if it matches a recognizable format.\n   - `DateTime.TryParse()`: Attempts to convert a string to a DateTime object and returns a boolean indicating success.\n\n5. **Calculating Differences**:\n   - `Subtract()`: Returns a `TimeSpan` object representing the difference between two dates.\n   - Example: `Dim difference As TimeSpan = date1.Subtract(date2)`\n\n6. **Comparing Dates**:\n   - Methods like `Compare()`, `Equals()`, and operators (`<`, `>`, `<=`, `>=`) are used to compare DateTime objects.\n\n7. **Other Useful Properties and Methods**:\n   - `Day`, `Month`, `Year`: Extract specific parts of the date.\n   - `DayOfWeek`: Gets the day of the week (e.g., Monday, Tuesday).\n   - `DayOfYear`: Gets the day of the year (1 to 365/366).",
        "code": "'Example Demonstrating Date-Related Functions:\nImports System\n\nModule Program\n    Sub Main()\n        ' Create DateTime objects\n        Dim currentDateTime As DateTime = DateTime.Now\n        Dim specificDate As New DateTime(2023, 12, 25)\n\n        ' Manipulate Dates\n        Console.WriteLine(\"Tomorrow: \" & currentDateTime.AddDays(1).ToString(\"yyyy-MM-dd\"))\n        Console.WriteLine(\"Next Year: \" & currentDateTime.AddYears(1).ToString(\"dddd, MMMM dd, yyyy\"))\n\n        ' Format Date\n        Console.WriteLine(\"Formatted Date: \" & specificDate.ToString(\"dddd, MMMM dd, yyyy\"))\n\n        ' Parse String to DateTime\n        Dim parsedDate As DateTime\n        If DateTime.TryParse(\"2025-03-18\", parsedDate) Then\n            Console.WriteLine(\"Parsed Date: \" & parsedDate.ToString())\n        Else\n            Console.WriteLine(\"Invalid date format.\")\n        End If\n\n        ' Calculate Difference Between Dates\n        Dim date1 As New DateTime(2025, 3, 18)\n        Dim date2 As New DateTime(2023, 3, 18)\n        Dim difference As TimeSpan = date1.Subtract(date2)\n        Console.WriteLine(\"Days Between: \" & difference.TotalDays & \" days\")\n\n        ' Display Parts of the Date\n        Console.WriteLine(\"Day of the Week: \" & currentDateTime.DayOfWeek.ToString())\n        Console.WriteLine(\"Day of the Year: \" & currentDateTime.DayOfYear)\n    End Sub\nEnd Module"
      },
      {
        "question": "8. What is a Constructor and Destructor? Explain Constructor using an example.",
        "answer": "A Constructor and Destructor are special methods in a class used for initializing and cleaning up resources in an object.\n\n1. **Constructor**: \n   - It is a special method that is automatically called when an object of the class is created.\n   - It is used to initialize the object and assign default values to its fields.\n   - The constructor has the same name as the class and does not have a return type.\n   - Types of Constructors:\n     - Default Constructor: Automatically provided if no constructor is explicitly defined.\n     - Parameterized Constructor: Accepts parameters to initialize the object with specific values.\n     - Shared Constructor (Static): Initializes shared or static members of a class.\n\n2. **Destructor**:\n   - It is a method that is automatically invoked when an object is destroyed.\n   - Destructors are used to release resources like closing file streams or database connections.\n   - In VB.NET, destructors are implemented using the `Finalize` method.",
        "code": "'Example of Constructor in VB.NET:\nClass Person\n    Private Name As String\n    Private Age As Integer\n\n    'Constructor\n    Public Sub New(ByVal personName As String, ByVal personAge As Integer)\n        Name = personName\n        Age = personAge\n    End Sub\n\n    'Method to Display Person Details\n    Public Sub Display()\n        Console.WriteLine(\"Name: \" & Name & \", Age: \" & Age)\n    End Sub\nEnd Class\n\n'Usage:\nModule Module1\n    Sub Main()\n        'Creating an object and initializing using Constructor\n        Dim person1 As New Person(\"Ankit\", 25)\n        person1.Display()\n    End Sub\nEnd Module"
      },
      {
        "question": "9. Write a note on Object-Oriented Concepts in VB.NET.",
        "answer": "Object-Oriented Programming (OOP) is a programming paradigm based on the concept of 'objects,' which can contain data in the form of fields (attributes or properties) and methods (functions). VB.NET is a fully object-oriented language, and its core principles enable developers to design robust, reusable, and maintainable applications by focusing on real-world entities. The main OOP concepts in VB.NET are:\n\n1. **Encapsulation**:\n   - Encapsulation is the process of wrapping data (fields) and code (methods) into a single unit, called a class.\n   - Access modifiers like `Public`, `Private`, `Protected` control the visibility of members within and outside the class.\n   - Encapsulation ensures data security and abstraction.\n\n2. **Inheritance**:\n   - Inheritance allows one class (child class) to inherit properties and methods of another class (parent class), promoting code reuse.\n   - VB.NET uses the `Inherits` keyword to achieve inheritance.\n   - Example: A `Car` class can inherit from a generic `Vehicle` class.\n\n3. **Polymorphism**:\n   - Polymorphism enables objects to take many forms and allows methods to perform differently based on the context.\n   - Achieved through method overriding (runtime polymorphism) and method overloading (compile-time polymorphism).\n\n4. **Abstraction**:\n   - Abstraction hides implementation details and shows only the essential features of an object.\n   - Achieved through abstract classes (using `MustInherit`) and interfaces (using `Interface` keyword).\n\n5. **Classes and Objects**:\n   - A class is a blueprint for creating objects. It defines properties and methods.\n   - An object is an instance of a class, representing a real-world entity. Objects interact through methods and properties.\n\n6. **Interfaces**:\n   - Interfaces define a contract that implementing classes must follow.\n   - Unlike inheritance, interfaces allow multiple classes to implement the same set of methods, promoting consistency and flexibility.",
        "code": "'Example of Object-Oriented Concepts in VB.NET:\nClass Vehicle\n    Public Property Brand As String\n    Public Property Speed As Integer\n\n    Public Overridable Sub DisplayDetails()\n        Console.WriteLine($\"Brand: {Brand}, Speed: {Speed}\")\n    End Sub\nEnd Class\n\nClass Car\n    Inherits Vehicle\n\n    Public Property NumberOfDoors As Integer\n\n    Public Overrides Sub DisplayDetails()\n        MyBase.DisplayDetails()\n        Console.WriteLine($\"Number of Doors: {NumberOfDoors}\")\n    End Sub\nEnd Class\n\nModule Program\n    Sub Main()\n        Dim myCar As New Car() With {.Brand = \"Toyota\", .Speed = 120, .NumberOfDoors = 4}\n        myCar.DisplayDetails()\n    End Sub\nEnd Module"
      },
      {
        "question": "10. What is an Exception? Explain different types of exceptions in detail.",
        "answer": "An exception is a runtime error or an unexpected event that disrupts the normal flow of a program. It can occur due to various reasons, such as invalid user input, loss of network connectivity, or file not found errors. Exception handling in VB.NET ensures that such runtime errors are gracefully managed, preventing application crashes and providing meaningful error messages. VB.NET uses the Try...Catch...Finally construct to handle exceptions effectively.\n\nTypes of Exceptions in VB.NET:\n\n1. **System.Exception**: The base class for all exceptions in VB.NET.\n\n2. **System.IO.IOException**: Occurs during Input/Output operations like file handling errors (e.g., file not found, read/write issues).\n\n3. **System.DivideByZeroException**: Raised when an attempt to divide a number by zero is made.\n\n4. **System.NullReferenceException**: Raised when trying to use an object reference that is not initialized.\n\n5. **System.IndexOutOfRangeException**: Raised when an attempt is made to access an element outside the bounds of an array or collection.\n\n6. **System.InvalidCastException**: Occurs when an invalid type casting is performed.\n\n7. **System.ArgumentException**: Raised when an invalid argument is passed to a method.\n\n8. **System.FormatException**: Raised when an invalid format is specified (e.g., parsing a string to a numeric value fails).",
        "code": "'Example of Exception Handling:\nImports System\n\nModule Program\n    Sub Main()\n        Try\n            Dim numerator As Integer = 10\n            Dim denominator As Integer = 0\n            Dim result As Integer = numerator / denominator ' This will throw DivideByZeroException\n        Catch ex As DivideByZeroException\n            Console.WriteLine(\"Error: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"General Error: \" & ex.Message)\n        Finally\n            Console.WriteLine(\"Execution completed.\")\n        End Try\n    End Sub\nEnd Module"
      },
      {
        "question": "11. Explain properties and methods of Array in VB.NET.",
        "answer": "Arrays in VB.NET are collections of elements of the same data type, stored in contiguous memory locations. The Array class offers various properties and methods to work with arrays effectively. Here's a breakdown:\n\n### Properties:\n1. **Length**: Returns the total number of elements in all dimensions of the array.\n2. **Rank**: Indicates the number of dimensions (or ranks) of the array.\n3. **IsFixedSize**: Specifies whether the array has a fixed size.\n4. **IsReadOnly**: Indicates if the array is read-only.\n5. **GetUpperBound(dimension)**: Retrieves the upper bound of a specified dimension in the array.\n\n### Methods:\n1. **Clear(array, index, length)**: Resets a range of elements in the array to their default values.\n2. **Copy(sourceArray, destinationArray, length)**: Copies elements from one array to another.\n3. **Sort(array)**: Sorts the array elements in ascending order.\n4. **Reverse(array)**: Reverses the sequence of elements in the array.\n5. **GetValue(index)**: Retrieves the value at the specified index in the array.\n6. **SetValue(value, index)**: Sets a value at the specified index in the array.\n7. **IndexOf(array, value)**: Finds the index of the first occurrence of a specific value in the array.\n8. **LastIndexOf(array, value)**: Finds the index of the last occurrence of a specific value in the array.\n\n### Benefits:\nUsing these properties and methods, arrays become a flexible tool for storing and manipulating data efficiently.",
        "code": "'Example demonstrating properties and methods of Array in VB.NET:\nDim numbers As Integer() = {5, 3, 8, 1, 2}\n\n'Using Properties:\nConsole.WriteLine(\"Length of Array: \" & numbers.Length) ' Total elements\nConsole.WriteLine(\"Rank of Array: \" & numbers.Rank) ' Number of dimensions\n\n'Using Methods:\n'Clear Elements:\nArray.Clear(numbers, 1, 2) ' Clears 2 elements starting from index 1\nConsole.WriteLine(\"After Clear: \" & String.Join(\", \", numbers))\n\n'Sort Array:\nArray.Sort(numbers)\nConsole.WriteLine(\"After Sort: \" & String.Join(\", \", numbers))\n\n'Reverse Array:\nArray.Reverse(numbers)\nConsole.WriteLine(\"After Reverse: \" & String.Join(\", \", numbers))\n\n'Finding Value:\nDim index As Integer = Array.IndexOf(numbers, 8)\nIf index <> -1 Then\n    Console.WriteLine(\"Found 8 at index: \" & index)\nElse\n    Console.WriteLine(\"8 not found.\")\nEnd If"
      },
      {
        "question": "12. Explain disconnected architecture of ADO.NET.",
        "answer": "The disconnected architecture of ADO.NET refers to the approach where the connection to the database is temporary. Once data is retrieved or updated, the connection is closed, and the application works with an in-memory representation of the data. This improves scalability and reduces database load.\n\n### Key Components of Disconnected Architecture:\n1. **DataSet**:\n   - Acts as an in-memory representation of data retrieved from the database.\n   - Stores data in tables, rows, and columns.\n   - Works independently of the database after retrieval.\n\n2. **DataAdapter**:\n   - A bridge between the DataSet and the database.\n   - Facilitates retrieval of data into the DataSet using the `Fill()` method and updates changes to the database using the `Update()` method.\n\n3. **Connection Object**:\n   - Temporarily connects to the database for data retrieval or updates.\n   - Closed after the operation is completed, making the system scalable.\n\n4. **XML Support**:\n   - Data in the DataSet can be serialized to XML for data exchange in disconnected scenarios.\n\n### Advantages:\n- Reduces the database connection usage, minimizing server load.\n- Allows flexibility to work offline with data stored in memory.\n- Data changes can be synchronized with the database when needed.",
        "code": "'Example of Disconnected Architecture in ADO.NET:\nImports System.Data\nImports System.Data.SqlClient\n\nModule Program\n    Sub Main()\n        ' Database connection\n        Dim connString As String = \"Data Source=ServerName;Initial Catalog=DatabaseName;Integrated Security=True\"\n        Dim connection As New SqlConnection(connString)\n\n        ' DataAdapter for bridging DataSet and database\n        Dim dataAdapter As New SqlDataAdapter(\"SELECT * FROM Students\", connection)\n\n        ' DataSet to store data\n        Dim dataSet As New DataSet()\n\n        ' Filling DataSet\n        dataAdapter.Fill(dataSet, \"Students\")\n\n        ' Displaying data from DataSet\n        For Each row As DataRow In dataSet.Tables(\"Students\").Rows\n            Console.WriteLine($\"ID: {row(\"ID\")}, Name: {row(\"Name\")}\")\n        Next\n\n        ' Closing connection automatically handled by DataAdapter\n    End Sub\nEnd Module"
      },
      {
        "question": "13. What is DataSet and Data Provider? Discuss them in detail.",
        "answer": "**DataSet**:\nA DataSet is an in-memory representation of data retrieved from a database. It operates in a disconnected environment, meaning that after fetching the data, the connection to the database is closed, and the DataSet works independently. It can represent multiple tables with relationships and is highly flexible for manipulating data without needing constant database connectivity.\n\n### Key Components of DataSet:\n1. **DataTableCollection**: Contains all tables retrieved from the data source.\n2. **DataRelationCollection**: Defines relationships and links between tables within the DataSet.\n3. **DataRowCollection**: Represents all rows in a DataTable.\n4. **DataColumnCollection**: Represents all columns within a DataTable.\n5. **PrimaryKey**: Identifies a unique column in a DataTable.\n6. **DataView**: Provides a filtered, customized view of a DataTable.\n\n### Advantages:\n- Disconnected architecture ensures better scalability and reduces database load.\n- Facilitates offline manipulation of data.\n- Capable of storing data from multiple tables with defined relations.\n\n**Data Provider**:\nA Data Provider is a set of components used for connecting to a database, executing commands, and retrieving data. It interacts with the database and transfers the data to a DataSet or DataReader.\n\n### Key Components of Data Provider:\n1. **Connection**: Used to establish a connection with the data source.\n2. **Command**: Represents a SQL query or stored procedure used for data manipulation.\n3. **DataReader**: Provides a forward-only, read-only way to access data.\n4. **DataAdapter**: Acts as a bridge between the DataSet and the database to retrieve and save data.\n\n### Types of Data Providers:\n- **SQL Server Data Provider**: For Microsoft SQL Server.\n- **OLE DB Data Provider**: For data sources exposed via OLE DB.\n- **ODBC Data Provider**: For ODBC-compliant data sources.\n- **Oracle Data Provider**: For Oracle databases.\n\nData Providers ensure efficient interaction with databases while offering flexibility through components like DataAdapters and DataReaders.",
        "code": "'Example of DataSet and Data Provider in VB.NET:\nImports System.Data\nImports System.Data.SqlClient\n\nModule Program\n    Sub Main()\n        ' Connection string\n        Dim connString As String = \"Data Source=ServerName;Initial Catalog=DatabaseName;Integrated Security=True\"\n        Dim connection As New SqlConnection(connString)\n\n        ' DataAdapter and DataSet\n        Dim dataAdapter As New SqlDataAdapter(\"SELECT * FROM Students\", connection)\n        Dim dataSet As New DataSet()\n\n        ' Fill DataSet\n        dataAdapter.Fill(dataSet, \"Students\")\n\n        ' Display Data\n        For Each row As DataRow In dataSet.Tables(\"Students\").Rows\n            Console.WriteLine($\"ID: {row(\"ID\")}, Name: {row(\"Name\")}\")\n        Next\n    End Sub\nEnd Module"
      }
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    ]
  },
  "practical": {
    "mcq": [
      {
        "question": "1. Which language is commonly used for practical programming in BCA?",
        "options": ["a) C#", "b) HTML"],
        "correctAnswer": "a",
        "id": "practical-q1"
      }
    ],
    "onemarks": [
      {
        "question": "1. What is a practical program?",
        "answer": "A practical program is a hands-on coding exercise that demonstrates the application of theoretical concepts in a real-world scenario."
      }
    ],
    "long": [
      {
        "question": "1. Write a program to implement a simple calculator.",
        "answer": "Here is a sample program in C# to implement a simple calculator:\n\nusing System;\n\nclass Calculator {\n    static void Main(string[] args) {\n        Console.WriteLine(\"Enter two numbers:\");\n        double num1 = Convert.ToDouble(Console.ReadLine());\n        double num2 = Convert.ToDouble(Console.ReadLine());\n        \n        Console.WriteLine(\"Select operation (+, -, *, /):\");\n        char operation = Convert.ToChar(Console.ReadLine());\n        \n        double result = 0;\n        switch (operation) {\n            case '+':\n                result = num1 + num2;\n                break;\n            case '-':\n                result = num1 - num2;\n                break;\n            case '*':\n                result = num1 * num2;\n                break;\n            case '/':\n                result = num1 / num2;\n                break;\n            default:\n                Console.WriteLine(\"Invalid operation\");\n                return;\n        }\n        Console.WriteLine($\"Result: {result}\");\n    }\n}"
      }
    ]
  }
}